<?php

/**
 * Base class that represents a row from the 'users' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 07/15/11 12:03:03
 *
 * @package    lib.model.om
 */
abstract class BaseUsers extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        UsersPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the activity field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $activity;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the password field.
	 * @var        string
	 */
	protected $password;

	/**
	 * The value for the password_ask field.
	 * @var        string
	 */
	protected $password_ask;

	/**
	 * The value for the password_rep field.
	 * @var        string
	 */
	protected $password_rep;

	/**
	 * The value for the is_company field.
	 * Note: this column has a database default value of: true
	 * @var        boolean
	 */
	protected $is_company;

	/**
	 * The value for the name field.
	 * @var        string
	 */
	protected $name;

	/**
	 * The value for the surname field.
	 * @var        string
	 */
	protected $surname;

	/**
	 * The value for the postcode field.
	 * @var        string
	 */
	protected $postcode;

	/**
	 * The value for the city field.
	 * @var        string
	 */
	protected $city;

	/**
	 * The value for the street field.
	 * @var        string
	 */
	protected $street;

	/**
	 * The value for the street_nr field.
	 * @var        string
	 */
	protected $street_nr;

	/**
	 * The value for the local_nr field.
	 * @var        string
	 */
	protected $local_nr;

	/**
	 * The value for the tel field.
	 * @var        string
	 */
	protected $tel;

	/**
	 * The value for the company_name field.
	 * @var        string
	 */
	protected $company_name;

	/**
	 * The value for the company_nip field.
	 * @var        string
	 */
	protected $company_nip;

	/**
	 * The value for the company_post_code field.
	 * @var        string
	 */
	protected $company_post_code;

	/**
	 * The value for the company_city field.
	 * @var        string
	 */
	protected $company_city;

	/**
	 * The value for the company_street field.
	 * @var        string
	 */
	protected $company_street;

	/**
	 * The value for the company_home_nr field.
	 * @var        string
	 */
	protected $company_home_nr;

	/**
	 * The value for the company_local_nr field.
	 * @var        string
	 */
	protected $company_local_nr;

	/**
	 * The value for the bank_name field.
	 * @var        string
	 */
	protected $bank_name;

	/**
	 * The value for the bank_account field.
	 * @var        string
	 */
	protected $bank_account;

	/**
	 * The value for the blocked field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $blocked;

	/**
	 * The value for the is_cash_on_delivery field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $is_cash_on_delivery;

	/**
	 * The value for the prepaid_balance field.
	 * @var        string
	 */
	protected $prepaid_balance;

	/**
	 * The value for the is_prepaid field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $is_prepaid;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * @var        array OrderShipping[] Collection to store aggregation of OrderShipping objects.
	 */
	protected $collOrderShippings;

	/**
	 * @var        Criteria The criteria used to select the current contents of collOrderShippings.
	 */
	private $lastOrderShippingCriteria = null;

	/**
	 * @var        array UserRecipient[] Collection to store aggregation of UserRecipient objects.
	 */
	protected $collUserRecipients;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUserRecipients.
	 */
	private $lastUserRecipientCriteria = null;

	/**
	 * @var        array UserSender[] Collection to store aggregation of UserSender objects.
	 */
	protected $collUserSenders;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUserSenders.
	 */
	private $lastUserSenderCriteria = null;

	/**
	 * @var        array Discounts[] Collection to store aggregation of Discounts objects.
	 */
	protected $collDiscountss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collDiscountss.
	 */
	private $lastDiscountsCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'UsersPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->activity = false;
		$this->is_company = true;
		$this->blocked = false;
		$this->is_cash_on_delivery = false;
		$this->is_prepaid = false;
	}

	/**
	 * Initializes internal state of BaseUsers object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [activity] column value.
	 * 
	 * @return     boolean
	 */
	public function getActivity()
	{
		return $this->activity;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [password] column value.
	 * 
	 * @return     string
	 */
	public function getPassword()
	{
		return $this->password;
	}

	/**
	 * Get the [password_ask] column value.
	 * 
	 * @return     string
	 */
	public function getPasswordAsk()
	{
		return $this->password_ask;
	}

	/**
	 * Get the [password_rep] column value.
	 * 
	 * @return     string
	 */
	public function getPasswordRep()
	{
		return $this->password_rep;
	}

	/**
	 * Get the [is_company] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsCompany()
	{
		return $this->is_company;
	}

	/**
	 * Get the [name] column value.
	 * 
	 * @return     string
	 */
	public function getName()
	{
		return $this->name;
	}

	/**
	 * Get the [surname] column value.
	 * 
	 * @return     string
	 */
	public function getSurname()
	{
		return $this->surname;
	}

	/**
	 * Get the [postcode] column value.
	 * 
	 * @return     string
	 */
	public function getPostcode()
	{
		return $this->postcode;
	}

	/**
	 * Get the [city] column value.
	 * 
	 * @return     string
	 */
	public function getCity()
	{
		return $this->city;
	}

	/**
	 * Get the [street] column value.
	 * 
	 * @return     string
	 */
	public function getStreet()
	{
		return $this->street;
	}

	/**
	 * Get the [street_nr] column value.
	 * 
	 * @return     string
	 */
	public function getStreetNr()
	{
		return $this->street_nr;
	}

	/**
	 * Get the [local_nr] column value.
	 * 
	 * @return     string
	 */
	public function getLocalNr()
	{
		return $this->local_nr;
	}

	/**
	 * Get the [tel] column value.
	 * 
	 * @return     string
	 */
	public function getTel()
	{
		return $this->tel;
	}

	/**
	 * Get the [company_name] column value.
	 * 
	 * @return     string
	 */
	public function getCompanyName()
	{
		return $this->company_name;
	}

	/**
	 * Get the [company_nip] column value.
	 * 
	 * @return     string
	 */
	public function getCompanyNip()
	{
		return $this->company_nip;
	}

	/**
	 * Get the [company_post_code] column value.
	 * 
	 * @return     string
	 */
	public function getCompanyPostCode()
	{
		return $this->company_post_code;
	}

	/**
	 * Get the [company_city] column value.
	 * 
	 * @return     string
	 */
	public function getCompanyCity()
	{
		return $this->company_city;
	}

	/**
	 * Get the [company_street] column value.
	 * 
	 * @return     string
	 */
	public function getCompanyStreet()
	{
		return $this->company_street;
	}

	/**
	 * Get the [company_home_nr] column value.
	 * 
	 * @return     string
	 */
	public function getCompanyHomeNr()
	{
		return $this->company_home_nr;
	}

	/**
	 * Get the [company_local_nr] column value.
	 * 
	 * @return     string
	 */
	public function getCompanyLocalNr()
	{
		return $this->company_local_nr;
	}

	/**
	 * Get the [bank_name] column value.
	 * 
	 * @return     string
	 */
	public function getBankName()
	{
		return $this->bank_name;
	}

	/**
	 * Get the [bank_account] column value.
	 * 
	 * @return     string
	 */
	public function getBankAccount()
	{
		return $this->bank_account;
	}

	/**
	 * Get the [blocked] column value.
	 * 
	 * @return     boolean
	 */
	public function getBlocked()
	{
		return $this->blocked;
	}

	/**
	 * Get the [is_cash_on_delivery] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsCashOnDelivery()
	{
		return $this->is_cash_on_delivery;
	}

	/**
	 * Get the [prepaid_balance] column value.
	 * 
	 * @return     string
	 */
	public function getPrepaidBalance()
	{
		return $this->prepaid_balance;
	}

	/**
	 * Get the [is_prepaid] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsPrepaid()
	{
		return $this->is_prepaid;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = UsersPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [activity] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setActivity($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->activity !== $v || $this->isNew()) {
			$this->activity = $v;
			$this->modifiedColumns[] = UsersPeer::ACTIVITY;
		}

		return $this;
	} // setActivity()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = UsersPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [password] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setPassword($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->password !== $v) {
			$this->password = $v;
			$this->modifiedColumns[] = UsersPeer::PASSWORD;
		}

		return $this;
	} // setPassword()

	/**
	 * Set the value of [password_ask] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setPasswordAsk($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->password_ask !== $v) {
			$this->password_ask = $v;
			$this->modifiedColumns[] = UsersPeer::PASSWORD_ASK;
		}

		return $this;
	} // setPasswordAsk()

	/**
	 * Set the value of [password_rep] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setPasswordRep($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->password_rep !== $v) {
			$this->password_rep = $v;
			$this->modifiedColumns[] = UsersPeer::PASSWORD_REP;
		}

		return $this;
	} // setPasswordRep()

	/**
	 * Set the value of [is_company] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setIsCompany($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_company !== $v || $this->isNew()) {
			$this->is_company = $v;
			$this->modifiedColumns[] = UsersPeer::IS_COMPANY;
		}

		return $this;
	} // setIsCompany()

	/**
	 * Set the value of [name] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->name !== $v) {
			$this->name = $v;
			$this->modifiedColumns[] = UsersPeer::NAME;
		}

		return $this;
	} // setName()

	/**
	 * Set the value of [surname] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setSurname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->surname !== $v) {
			$this->surname = $v;
			$this->modifiedColumns[] = UsersPeer::SURNAME;
		}

		return $this;
	} // setSurname()

	/**
	 * Set the value of [postcode] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setPostcode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->postcode !== $v) {
			$this->postcode = $v;
			$this->modifiedColumns[] = UsersPeer::POSTCODE;
		}

		return $this;
	} // setPostcode()

	/**
	 * Set the value of [city] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setCity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->city !== $v) {
			$this->city = $v;
			$this->modifiedColumns[] = UsersPeer::CITY;
		}

		return $this;
	} // setCity()

	/**
	 * Set the value of [street] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setStreet($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->street !== $v) {
			$this->street = $v;
			$this->modifiedColumns[] = UsersPeer::STREET;
		}

		return $this;
	} // setStreet()

	/**
	 * Set the value of [street_nr] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setStreetNr($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->street_nr !== $v) {
			$this->street_nr = $v;
			$this->modifiedColumns[] = UsersPeer::STREET_NR;
		}

		return $this;
	} // setStreetNr()

	/**
	 * Set the value of [local_nr] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setLocalNr($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->local_nr !== $v) {
			$this->local_nr = $v;
			$this->modifiedColumns[] = UsersPeer::LOCAL_NR;
		}

		return $this;
	} // setLocalNr()

	/**
	 * Set the value of [tel] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setTel($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tel !== $v) {
			$this->tel = $v;
			$this->modifiedColumns[] = UsersPeer::TEL;
		}

		return $this;
	} // setTel()

	/**
	 * Set the value of [company_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setCompanyName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->company_name !== $v) {
			$this->company_name = $v;
			$this->modifiedColumns[] = UsersPeer::COMPANY_NAME;
		}

		return $this;
	} // setCompanyName()

	/**
	 * Set the value of [company_nip] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setCompanyNip($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->company_nip !== $v) {
			$this->company_nip = $v;
			$this->modifiedColumns[] = UsersPeer::COMPANY_NIP;
		}

		return $this;
	} // setCompanyNip()

	/**
	 * Set the value of [company_post_code] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setCompanyPostCode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->company_post_code !== $v) {
			$this->company_post_code = $v;
			$this->modifiedColumns[] = UsersPeer::COMPANY_POST_CODE;
		}

		return $this;
	} // setCompanyPostCode()

	/**
	 * Set the value of [company_city] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setCompanyCity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->company_city !== $v) {
			$this->company_city = $v;
			$this->modifiedColumns[] = UsersPeer::COMPANY_CITY;
		}

		return $this;
	} // setCompanyCity()

	/**
	 * Set the value of [company_street] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setCompanyStreet($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->company_street !== $v) {
			$this->company_street = $v;
			$this->modifiedColumns[] = UsersPeer::COMPANY_STREET;
		}

		return $this;
	} // setCompanyStreet()

	/**
	 * Set the value of [company_home_nr] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setCompanyHomeNr($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->company_home_nr !== $v) {
			$this->company_home_nr = $v;
			$this->modifiedColumns[] = UsersPeer::COMPANY_HOME_NR;
		}

		return $this;
	} // setCompanyHomeNr()

	/**
	 * Set the value of [company_local_nr] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setCompanyLocalNr($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->company_local_nr !== $v) {
			$this->company_local_nr = $v;
			$this->modifiedColumns[] = UsersPeer::COMPANY_LOCAL_NR;
		}

		return $this;
	} // setCompanyLocalNr()

	/**
	 * Set the value of [bank_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setBankName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->bank_name !== $v) {
			$this->bank_name = $v;
			$this->modifiedColumns[] = UsersPeer::BANK_NAME;
		}

		return $this;
	} // setBankName()

	/**
	 * Set the value of [bank_account] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setBankAccount($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->bank_account !== $v) {
			$this->bank_account = $v;
			$this->modifiedColumns[] = UsersPeer::BANK_ACCOUNT;
		}

		return $this;
	} // setBankAccount()

	/**
	 * Set the value of [blocked] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setBlocked($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->blocked !== $v || $this->isNew()) {
			$this->blocked = $v;
			$this->modifiedColumns[] = UsersPeer::BLOCKED;
		}

		return $this;
	} // setBlocked()

	/**
	 * Set the value of [is_cash_on_delivery] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setIsCashOnDelivery($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_cash_on_delivery !== $v || $this->isNew()) {
			$this->is_cash_on_delivery = $v;
			$this->modifiedColumns[] = UsersPeer::IS_CASH_ON_DELIVERY;
		}

		return $this;
	} // setIsCashOnDelivery()

	/**
	 * Set the value of [prepaid_balance] column.
	 * 
	 * @param      string $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setPrepaidBalance($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->prepaid_balance !== $v) {
			$this->prepaid_balance = $v;
			$this->modifiedColumns[] = UsersPeer::PREPAID_BALANCE;
		}

		return $this;
	} // setPrepaidBalance()

	/**
	 * Set the value of [is_prepaid] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Users The current object (for fluent API support)
	 */
	public function setIsPrepaid($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_prepaid !== $v || $this->isNew()) {
			$this->is_prepaid = $v;
			$this->modifiedColumns[] = UsersPeer::IS_PREPAID;
		}

		return $this;
	} // setIsPrepaid()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Users The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = UsersPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Users The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = UsersPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->activity !== false) {
				return false;
			}

			if ($this->is_company !== true) {
				return false;
			}

			if ($this->blocked !== false) {
				return false;
			}

			if ($this->is_cash_on_delivery !== false) {
				return false;
			}

			if ($this->is_prepaid !== false) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->activity = ($row[$startcol + 1] !== null) ? (boolean) $row[$startcol + 1] : null;
			$this->email = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->password = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->password_ask = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->password_rep = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->is_company = ($row[$startcol + 6] !== null) ? (boolean) $row[$startcol + 6] : null;
			$this->name = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->surname = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->postcode = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->city = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->street = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->street_nr = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->local_nr = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->tel = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->company_name = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->company_nip = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->company_post_code = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->company_city = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->company_street = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->company_home_nr = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->company_local_nr = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->bank_name = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->bank_account = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->blocked = ($row[$startcol + 24] !== null) ? (boolean) $row[$startcol + 24] : null;
			$this->is_cash_on_delivery = ($row[$startcol + 25] !== null) ? (boolean) $row[$startcol + 25] : null;
			$this->prepaid_balance = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->is_prepaid = ($row[$startcol + 27] !== null) ? (boolean) $row[$startcol + 27] : null;
			$this->created_at = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->updated_at = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 30; // 30 = UsersPeer::NUM_COLUMNS - UsersPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Users object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UsersPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = UsersPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collOrderShippings = null;
			$this->lastOrderShippingCriteria = null;

			$this->collUserRecipients = null;
			$this->lastUserRecipientCriteria = null;

			$this->collUserSenders = null;
			$this->lastUserSenderCriteria = null;

			$this->collDiscountss = null;
			$this->lastDiscountsCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UsersPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseUsers:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				UsersPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseUsers:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UsersPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseUsers:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(UsersPeer::UPDATED_AT))
			{
			  $this->setUpdatedAt(time());
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(UsersPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseUsers:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				UsersPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = UsersPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = UsersPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += UsersPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collOrderShippings !== null) {
				foreach ($this->collOrderShippings as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collUserRecipients !== null) {
				foreach ($this->collUserRecipients as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collUserSenders !== null) {
				foreach ($this->collUserSenders as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collDiscountss !== null) {
				foreach ($this->collDiscountss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = UsersPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collOrderShippings !== null) {
					foreach ($this->collOrderShippings as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collUserRecipients !== null) {
					foreach ($this->collUserRecipients as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collUserSenders !== null) {
					foreach ($this->collUserSenders as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collDiscountss !== null) {
					foreach ($this->collDiscountss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UsersPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getActivity();
				break;
			case 2:
				return $this->getEmail();
				break;
			case 3:
				return $this->getPassword();
				break;
			case 4:
				return $this->getPasswordAsk();
				break;
			case 5:
				return $this->getPasswordRep();
				break;
			case 6:
				return $this->getIsCompany();
				break;
			case 7:
				return $this->getName();
				break;
			case 8:
				return $this->getSurname();
				break;
			case 9:
				return $this->getPostcode();
				break;
			case 10:
				return $this->getCity();
				break;
			case 11:
				return $this->getStreet();
				break;
			case 12:
				return $this->getStreetNr();
				break;
			case 13:
				return $this->getLocalNr();
				break;
			case 14:
				return $this->getTel();
				break;
			case 15:
				return $this->getCompanyName();
				break;
			case 16:
				return $this->getCompanyNip();
				break;
			case 17:
				return $this->getCompanyPostCode();
				break;
			case 18:
				return $this->getCompanyCity();
				break;
			case 19:
				return $this->getCompanyStreet();
				break;
			case 20:
				return $this->getCompanyHomeNr();
				break;
			case 21:
				return $this->getCompanyLocalNr();
				break;
			case 22:
				return $this->getBankName();
				break;
			case 23:
				return $this->getBankAccount();
				break;
			case 24:
				return $this->getBlocked();
				break;
			case 25:
				return $this->getIsCashOnDelivery();
				break;
			case 26:
				return $this->getPrepaidBalance();
				break;
			case 27:
				return $this->getIsPrepaid();
				break;
			case 28:
				return $this->getCreatedAt();
				break;
			case 29:
				return $this->getUpdatedAt();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = UsersPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getActivity(),
			$keys[2] => $this->getEmail(),
			$keys[3] => $this->getPassword(),
			$keys[4] => $this->getPasswordAsk(),
			$keys[5] => $this->getPasswordRep(),
			$keys[6] => $this->getIsCompany(),
			$keys[7] => $this->getName(),
			$keys[8] => $this->getSurname(),
			$keys[9] => $this->getPostcode(),
			$keys[10] => $this->getCity(),
			$keys[11] => $this->getStreet(),
			$keys[12] => $this->getStreetNr(),
			$keys[13] => $this->getLocalNr(),
			$keys[14] => $this->getTel(),
			$keys[15] => $this->getCompanyName(),
			$keys[16] => $this->getCompanyNip(),
			$keys[17] => $this->getCompanyPostCode(),
			$keys[18] => $this->getCompanyCity(),
			$keys[19] => $this->getCompanyStreet(),
			$keys[20] => $this->getCompanyHomeNr(),
			$keys[21] => $this->getCompanyLocalNr(),
			$keys[22] => $this->getBankName(),
			$keys[23] => $this->getBankAccount(),
			$keys[24] => $this->getBlocked(),
			$keys[25] => $this->getIsCashOnDelivery(),
			$keys[26] => $this->getPrepaidBalance(),
			$keys[27] => $this->getIsPrepaid(),
			$keys[28] => $this->getCreatedAt(),
			$keys[29] => $this->getUpdatedAt(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UsersPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setActivity($value);
				break;
			case 2:
				$this->setEmail($value);
				break;
			case 3:
				$this->setPassword($value);
				break;
			case 4:
				$this->setPasswordAsk($value);
				break;
			case 5:
				$this->setPasswordRep($value);
				break;
			case 6:
				$this->setIsCompany($value);
				break;
			case 7:
				$this->setName($value);
				break;
			case 8:
				$this->setSurname($value);
				break;
			case 9:
				$this->setPostcode($value);
				break;
			case 10:
				$this->setCity($value);
				break;
			case 11:
				$this->setStreet($value);
				break;
			case 12:
				$this->setStreetNr($value);
				break;
			case 13:
				$this->setLocalNr($value);
				break;
			case 14:
				$this->setTel($value);
				break;
			case 15:
				$this->setCompanyName($value);
				break;
			case 16:
				$this->setCompanyNip($value);
				break;
			case 17:
				$this->setCompanyPostCode($value);
				break;
			case 18:
				$this->setCompanyCity($value);
				break;
			case 19:
				$this->setCompanyStreet($value);
				break;
			case 20:
				$this->setCompanyHomeNr($value);
				break;
			case 21:
				$this->setCompanyLocalNr($value);
				break;
			case 22:
				$this->setBankName($value);
				break;
			case 23:
				$this->setBankAccount($value);
				break;
			case 24:
				$this->setBlocked($value);
				break;
			case 25:
				$this->setIsCashOnDelivery($value);
				break;
			case 26:
				$this->setPrepaidBalance($value);
				break;
			case 27:
				$this->setIsPrepaid($value);
				break;
			case 28:
				$this->setCreatedAt($value);
				break;
			case 29:
				$this->setUpdatedAt($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = UsersPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setActivity($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setEmail($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setPassword($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setPasswordAsk($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setPasswordRep($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setIsCompany($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setName($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setSurname($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setPostcode($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setCity($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setStreet($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setStreetNr($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setLocalNr($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setTel($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setCompanyName($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setCompanyNip($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setCompanyPostCode($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setCompanyCity($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setCompanyStreet($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setCompanyHomeNr($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setCompanyLocalNr($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setBankName($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setBankAccount($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setBlocked($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setIsCashOnDelivery($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setPrepaidBalance($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setIsPrepaid($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setCreatedAt($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setUpdatedAt($arr[$keys[29]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(UsersPeer::DATABASE_NAME);

		if ($this->isColumnModified(UsersPeer::ID)) $criteria->add(UsersPeer::ID, $this->id);
		if ($this->isColumnModified(UsersPeer::ACTIVITY)) $criteria->add(UsersPeer::ACTIVITY, $this->activity);
		if ($this->isColumnModified(UsersPeer::EMAIL)) $criteria->add(UsersPeer::EMAIL, $this->email);
		if ($this->isColumnModified(UsersPeer::PASSWORD)) $criteria->add(UsersPeer::PASSWORD, $this->password);
		if ($this->isColumnModified(UsersPeer::PASSWORD_ASK)) $criteria->add(UsersPeer::PASSWORD_ASK, $this->password_ask);
		if ($this->isColumnModified(UsersPeer::PASSWORD_REP)) $criteria->add(UsersPeer::PASSWORD_REP, $this->password_rep);
		if ($this->isColumnModified(UsersPeer::IS_COMPANY)) $criteria->add(UsersPeer::IS_COMPANY, $this->is_company);
		if ($this->isColumnModified(UsersPeer::NAME)) $criteria->add(UsersPeer::NAME, $this->name);
		if ($this->isColumnModified(UsersPeer::SURNAME)) $criteria->add(UsersPeer::SURNAME, $this->surname);
		if ($this->isColumnModified(UsersPeer::POSTCODE)) $criteria->add(UsersPeer::POSTCODE, $this->postcode);
		if ($this->isColumnModified(UsersPeer::CITY)) $criteria->add(UsersPeer::CITY, $this->city);
		if ($this->isColumnModified(UsersPeer::STREET)) $criteria->add(UsersPeer::STREET, $this->street);
		if ($this->isColumnModified(UsersPeer::STREET_NR)) $criteria->add(UsersPeer::STREET_NR, $this->street_nr);
		if ($this->isColumnModified(UsersPeer::LOCAL_NR)) $criteria->add(UsersPeer::LOCAL_NR, $this->local_nr);
		if ($this->isColumnModified(UsersPeer::TEL)) $criteria->add(UsersPeer::TEL, $this->tel);
		if ($this->isColumnModified(UsersPeer::COMPANY_NAME)) $criteria->add(UsersPeer::COMPANY_NAME, $this->company_name);
		if ($this->isColumnModified(UsersPeer::COMPANY_NIP)) $criteria->add(UsersPeer::COMPANY_NIP, $this->company_nip);
		if ($this->isColumnModified(UsersPeer::COMPANY_POST_CODE)) $criteria->add(UsersPeer::COMPANY_POST_CODE, $this->company_post_code);
		if ($this->isColumnModified(UsersPeer::COMPANY_CITY)) $criteria->add(UsersPeer::COMPANY_CITY, $this->company_city);
		if ($this->isColumnModified(UsersPeer::COMPANY_STREET)) $criteria->add(UsersPeer::COMPANY_STREET, $this->company_street);
		if ($this->isColumnModified(UsersPeer::COMPANY_HOME_NR)) $criteria->add(UsersPeer::COMPANY_HOME_NR, $this->company_home_nr);
		if ($this->isColumnModified(UsersPeer::COMPANY_LOCAL_NR)) $criteria->add(UsersPeer::COMPANY_LOCAL_NR, $this->company_local_nr);
		if ($this->isColumnModified(UsersPeer::BANK_NAME)) $criteria->add(UsersPeer::BANK_NAME, $this->bank_name);
		if ($this->isColumnModified(UsersPeer::BANK_ACCOUNT)) $criteria->add(UsersPeer::BANK_ACCOUNT, $this->bank_account);
		if ($this->isColumnModified(UsersPeer::BLOCKED)) $criteria->add(UsersPeer::BLOCKED, $this->blocked);
		if ($this->isColumnModified(UsersPeer::IS_CASH_ON_DELIVERY)) $criteria->add(UsersPeer::IS_CASH_ON_DELIVERY, $this->is_cash_on_delivery);
		if ($this->isColumnModified(UsersPeer::PREPAID_BALANCE)) $criteria->add(UsersPeer::PREPAID_BALANCE, $this->prepaid_balance);
		if ($this->isColumnModified(UsersPeer::IS_PREPAID)) $criteria->add(UsersPeer::IS_PREPAID, $this->is_prepaid);
		if ($this->isColumnModified(UsersPeer::CREATED_AT)) $criteria->add(UsersPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(UsersPeer::UPDATED_AT)) $criteria->add(UsersPeer::UPDATED_AT, $this->updated_at);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(UsersPeer::DATABASE_NAME);

		$criteria->add(UsersPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Users (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setActivity($this->activity);

		$copyObj->setEmail($this->email);

		$copyObj->setPassword($this->password);

		$copyObj->setPasswordAsk($this->password_ask);

		$copyObj->setPasswordRep($this->password_rep);

		$copyObj->setIsCompany($this->is_company);

		$copyObj->setName($this->name);

		$copyObj->setSurname($this->surname);

		$copyObj->setPostcode($this->postcode);

		$copyObj->setCity($this->city);

		$copyObj->setStreet($this->street);

		$copyObj->setStreetNr($this->street_nr);

		$copyObj->setLocalNr($this->local_nr);

		$copyObj->setTel($this->tel);

		$copyObj->setCompanyName($this->company_name);

		$copyObj->setCompanyNip($this->company_nip);

		$copyObj->setCompanyPostCode($this->company_post_code);

		$copyObj->setCompanyCity($this->company_city);

		$copyObj->setCompanyStreet($this->company_street);

		$copyObj->setCompanyHomeNr($this->company_home_nr);

		$copyObj->setCompanyLocalNr($this->company_local_nr);

		$copyObj->setBankName($this->bank_name);

		$copyObj->setBankAccount($this->bank_account);

		$copyObj->setBlocked($this->blocked);

		$copyObj->setIsCashOnDelivery($this->is_cash_on_delivery);

		$copyObj->setPrepaidBalance($this->prepaid_balance);

		$copyObj->setIsPrepaid($this->is_prepaid);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getOrderShippings() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addOrderShipping($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getUserRecipients() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUserRecipient($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getUserSenders() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUserSender($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getDiscountss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addDiscounts($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Users Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     UsersPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new UsersPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collOrderShippings collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addOrderShippings()
	 */
	public function clearOrderShippings()
	{
		$this->collOrderShippings = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collOrderShippings collection (array).
	 *
	 * By default this just sets the collOrderShippings collection to an empty array (like clearcollOrderShippings());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initOrderShippings()
	{
		$this->collOrderShippings = array();
	}

	/**
	 * Gets an array of OrderShipping objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Users has previously been saved, it will retrieve
	 * related OrderShippings from storage. If this Users is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array OrderShipping[]
	 * @throws     PropelException
	 */
	public function getOrderShippings($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collOrderShippings === null) {
			if ($this->isNew()) {
			   $this->collOrderShippings = array();
			} else {

				$criteria->add(OrderShippingPeer::USER_ID, $this->id);

				OrderShippingPeer::addSelectColumns($criteria);
				$this->collOrderShippings = OrderShippingPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(OrderShippingPeer::USER_ID, $this->id);

				OrderShippingPeer::addSelectColumns($criteria);
				if (!isset($this->lastOrderShippingCriteria) || !$this->lastOrderShippingCriteria->equals($criteria)) {
					$this->collOrderShippings = OrderShippingPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastOrderShippingCriteria = $criteria;
		return $this->collOrderShippings;
	}

	/**
	 * Returns the number of related OrderShipping objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related OrderShipping objects.
	 * @throws     PropelException
	 */
	public function countOrderShippings(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collOrderShippings === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(OrderShippingPeer::USER_ID, $this->id);

				$count = OrderShippingPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(OrderShippingPeer::USER_ID, $this->id);

				if (!isset($this->lastOrderShippingCriteria) || !$this->lastOrderShippingCriteria->equals($criteria)) {
					$count = OrderShippingPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collOrderShippings);
				}
			} else {
				$count = count($this->collOrderShippings);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a OrderShipping object to this object
	 * through the OrderShipping foreign key attribute.
	 *
	 * @param      OrderShipping $l OrderShipping
	 * @return     void
	 * @throws     PropelException
	 */
	public function addOrderShipping(OrderShipping $l)
	{
		if ($this->collOrderShippings === null) {
			$this->initOrderShippings();
		}
		if (!in_array($l, $this->collOrderShippings, true)) { // only add it if the **same** object is not already associated
			array_push($this->collOrderShippings, $l);
			$l->setUsers($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Users is new, it will return
	 * an empty collection; or if this Users has previously
	 * been saved, it will retrieve related OrderShippings from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Users.
	 */
	public function getOrderShippingsJoinCourier($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collOrderShippings === null) {
			if ($this->isNew()) {
				$this->collOrderShippings = array();
			} else {

				$criteria->add(OrderShippingPeer::USER_ID, $this->id);

				$this->collOrderShippings = OrderShippingPeer::doSelectJoinCourier($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(OrderShippingPeer::USER_ID, $this->id);

			if (!isset($this->lastOrderShippingCriteria) || !$this->lastOrderShippingCriteria->equals($criteria)) {
				$this->collOrderShippings = OrderShippingPeer::doSelectJoinCourier($criteria, $con, $join_behavior);
			}
		}
		$this->lastOrderShippingCriteria = $criteria;

		return $this->collOrderShippings;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Users is new, it will return
	 * an empty collection; or if this Users has previously
	 * been saved, it will retrieve related OrderShippings from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Users.
	 */
	public function getOrderShippingsJoinShippingTypes($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collOrderShippings === null) {
			if ($this->isNew()) {
				$this->collOrderShippings = array();
			} else {

				$criteria->add(OrderShippingPeer::USER_ID, $this->id);

				$this->collOrderShippings = OrderShippingPeer::doSelectJoinShippingTypes($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(OrderShippingPeer::USER_ID, $this->id);

			if (!isset($this->lastOrderShippingCriteria) || !$this->lastOrderShippingCriteria->equals($criteria)) {
				$this->collOrderShippings = OrderShippingPeer::doSelectJoinShippingTypes($criteria, $con, $join_behavior);
			}
		}
		$this->lastOrderShippingCriteria = $criteria;

		return $this->collOrderShippings;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Users is new, it will return
	 * an empty collection; or if this Users has previously
	 * been saved, it will retrieve related OrderShippings from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Users.
	 */
	public function getOrderShippingsJoinZones($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collOrderShippings === null) {
			if ($this->isNew()) {
				$this->collOrderShippings = array();
			} else {

				$criteria->add(OrderShippingPeer::USER_ID, $this->id);

				$this->collOrderShippings = OrderShippingPeer::doSelectJoinZones($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(OrderShippingPeer::USER_ID, $this->id);

			if (!isset($this->lastOrderShippingCriteria) || !$this->lastOrderShippingCriteria->equals($criteria)) {
				$this->collOrderShippings = OrderShippingPeer::doSelectJoinZones($criteria, $con, $join_behavior);
			}
		}
		$this->lastOrderShippingCriteria = $criteria;

		return $this->collOrderShippings;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Users is new, it will return
	 * an empty collection; or if this Users has previously
	 * been saved, it will retrieve related OrderShippings from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Users.
	 */
	public function getOrderShippingsJoinCountries($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collOrderShippings === null) {
			if ($this->isNew()) {
				$this->collOrderShippings = array();
			} else {

				$criteria->add(OrderShippingPeer::USER_ID, $this->id);

				$this->collOrderShippings = OrderShippingPeer::doSelectJoinCountries($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(OrderShippingPeer::USER_ID, $this->id);

			if (!isset($this->lastOrderShippingCriteria) || !$this->lastOrderShippingCriteria->equals($criteria)) {
				$this->collOrderShippings = OrderShippingPeer::doSelectJoinCountries($criteria, $con, $join_behavior);
			}
		}
		$this->lastOrderShippingCriteria = $criteria;

		return $this->collOrderShippings;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Users is new, it will return
	 * an empty collection; or if this Users has previously
	 * been saved, it will retrieve related OrderShippings from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Users.
	 */
	public function getOrderShippingsJoinPackagingTypes($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collOrderShippings === null) {
			if ($this->isNew()) {
				$this->collOrderShippings = array();
			} else {

				$criteria->add(OrderShippingPeer::USER_ID, $this->id);

				$this->collOrderShippings = OrderShippingPeer::doSelectJoinPackagingTypes($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(OrderShippingPeer::USER_ID, $this->id);

			if (!isset($this->lastOrderShippingCriteria) || !$this->lastOrderShippingCriteria->equals($criteria)) {
				$this->collOrderShippings = OrderShippingPeer::doSelectJoinPackagingTypes($criteria, $con, $join_behavior);
			}
		}
		$this->lastOrderShippingCriteria = $criteria;

		return $this->collOrderShippings;
	}

	/**
	 * Clears out the collUserRecipients collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUserRecipients()
	 */
	public function clearUserRecipients()
	{
		$this->collUserRecipients = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUserRecipients collection (array).
	 *
	 * By default this just sets the collUserRecipients collection to an empty array (like clearcollUserRecipients());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUserRecipients()
	{
		$this->collUserRecipients = array();
	}

	/**
	 * Gets an array of UserRecipient objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Users has previously been saved, it will retrieve
	 * related UserRecipients from storage. If this Users is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array UserRecipient[]
	 * @throws     PropelException
	 */
	public function getUserRecipients($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserRecipients === null) {
			if ($this->isNew()) {
			   $this->collUserRecipients = array();
			} else {

				$criteria->add(UserRecipientPeer::USER_ID, $this->id);

				UserRecipientPeer::addSelectColumns($criteria);
				$this->collUserRecipients = UserRecipientPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UserRecipientPeer::USER_ID, $this->id);

				UserRecipientPeer::addSelectColumns($criteria);
				if (!isset($this->lastUserRecipientCriteria) || !$this->lastUserRecipientCriteria->equals($criteria)) {
					$this->collUserRecipients = UserRecipientPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUserRecipientCriteria = $criteria;
		return $this->collUserRecipients;
	}

	/**
	 * Returns the number of related UserRecipient objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related UserRecipient objects.
	 * @throws     PropelException
	 */
	public function countUserRecipients(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUserRecipients === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UserRecipientPeer::USER_ID, $this->id);

				$count = UserRecipientPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UserRecipientPeer::USER_ID, $this->id);

				if (!isset($this->lastUserRecipientCriteria) || !$this->lastUserRecipientCriteria->equals($criteria)) {
					$count = UserRecipientPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collUserRecipients);
				}
			} else {
				$count = count($this->collUserRecipients);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a UserRecipient object to this object
	 * through the UserRecipient foreign key attribute.
	 *
	 * @param      UserRecipient $l UserRecipient
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUserRecipient(UserRecipient $l)
	{
		if ($this->collUserRecipients === null) {
			$this->initUserRecipients();
		}
		if (!in_array($l, $this->collUserRecipients, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUserRecipients, $l);
			$l->setUsers($this);
		}
	}

	/**
	 * Clears out the collUserSenders collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUserSenders()
	 */
	public function clearUserSenders()
	{
		$this->collUserSenders = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUserSenders collection (array).
	 *
	 * By default this just sets the collUserSenders collection to an empty array (like clearcollUserSenders());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUserSenders()
	{
		$this->collUserSenders = array();
	}

	/**
	 * Gets an array of UserSender objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Users has previously been saved, it will retrieve
	 * related UserSenders from storage. If this Users is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array UserSender[]
	 * @throws     PropelException
	 */
	public function getUserSenders($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserSenders === null) {
			if ($this->isNew()) {
			   $this->collUserSenders = array();
			} else {

				$criteria->add(UserSenderPeer::USER_ID, $this->id);

				UserSenderPeer::addSelectColumns($criteria);
				$this->collUserSenders = UserSenderPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UserSenderPeer::USER_ID, $this->id);

				UserSenderPeer::addSelectColumns($criteria);
				if (!isset($this->lastUserSenderCriteria) || !$this->lastUserSenderCriteria->equals($criteria)) {
					$this->collUserSenders = UserSenderPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUserSenderCriteria = $criteria;
		return $this->collUserSenders;
	}

	/**
	 * Returns the number of related UserSender objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related UserSender objects.
	 * @throws     PropelException
	 */
	public function countUserSenders(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUserSenders === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UserSenderPeer::USER_ID, $this->id);

				$count = UserSenderPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UserSenderPeer::USER_ID, $this->id);

				if (!isset($this->lastUserSenderCriteria) || !$this->lastUserSenderCriteria->equals($criteria)) {
					$count = UserSenderPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collUserSenders);
				}
			} else {
				$count = count($this->collUserSenders);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a UserSender object to this object
	 * through the UserSender foreign key attribute.
	 *
	 * @param      UserSender $l UserSender
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUserSender(UserSender $l)
	{
		if ($this->collUserSenders === null) {
			$this->initUserSenders();
		}
		if (!in_array($l, $this->collUserSenders, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUserSenders, $l);
			$l->setUsers($this);
		}
	}

	/**
	 * Clears out the collDiscountss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addDiscountss()
	 */
	public function clearDiscountss()
	{
		$this->collDiscountss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collDiscountss collection (array).
	 *
	 * By default this just sets the collDiscountss collection to an empty array (like clearcollDiscountss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initDiscountss()
	{
		$this->collDiscountss = array();
	}

	/**
	 * Gets an array of Discounts objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Users has previously been saved, it will retrieve
	 * related Discountss from storage. If this Users is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Discounts[]
	 * @throws     PropelException
	 */
	public function getDiscountss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDiscountss === null) {
			if ($this->isNew()) {
			   $this->collDiscountss = array();
			} else {

				$criteria->add(DiscountsPeer::USER_ID, $this->id);

				DiscountsPeer::addSelectColumns($criteria);
				$this->collDiscountss = DiscountsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(DiscountsPeer::USER_ID, $this->id);

				DiscountsPeer::addSelectColumns($criteria);
				if (!isset($this->lastDiscountsCriteria) || !$this->lastDiscountsCriteria->equals($criteria)) {
					$this->collDiscountss = DiscountsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastDiscountsCriteria = $criteria;
		return $this->collDiscountss;
	}

	/**
	 * Returns the number of related Discounts objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Discounts objects.
	 * @throws     PropelException
	 */
	public function countDiscountss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collDiscountss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(DiscountsPeer::USER_ID, $this->id);

				$count = DiscountsPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(DiscountsPeer::USER_ID, $this->id);

				if (!isset($this->lastDiscountsCriteria) || !$this->lastDiscountsCriteria->equals($criteria)) {
					$count = DiscountsPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collDiscountss);
				}
			} else {
				$count = count($this->collDiscountss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Discounts object to this object
	 * through the Discounts foreign key attribute.
	 *
	 * @param      Discounts $l Discounts
	 * @return     void
	 * @throws     PropelException
	 */
	public function addDiscounts(Discounts $l)
	{
		if ($this->collDiscountss === null) {
			$this->initDiscountss();
		}
		if (!in_array($l, $this->collDiscountss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collDiscountss, $l);
			$l->setUsers($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Users is new, it will return
	 * an empty collection; or if this Users has previously
	 * been saved, it will retrieve related Discountss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Users.
	 */
	public function getDiscountssJoinShippingTypes($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(UsersPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collDiscountss === null) {
			if ($this->isNew()) {
				$this->collDiscountss = array();
			} else {

				$criteria->add(DiscountsPeer::USER_ID, $this->id);

				$this->collDiscountss = DiscountsPeer::doSelectJoinShippingTypes($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(DiscountsPeer::USER_ID, $this->id);

			if (!isset($this->lastDiscountsCriteria) || !$this->lastDiscountsCriteria->equals($criteria)) {
				$this->collDiscountss = DiscountsPeer::doSelectJoinShippingTypes($criteria, $con, $join_behavior);
			}
		}
		$this->lastDiscountsCriteria = $criteria;

		return $this->collDiscountss;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collOrderShippings) {
				foreach ((array) $this->collOrderShippings as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collUserRecipients) {
				foreach ((array) $this->collUserRecipients as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collUserSenders) {
				foreach ((array) $this->collUserSenders as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collDiscountss) {
				foreach ((array) $this->collDiscountss as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collOrderShippings = null;
		$this->collUserRecipients = null;
		$this->collUserSenders = null;
		$this->collDiscountss = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseUsers:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseUsers::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseUsers
