<?php

/**
 * Base class that represents a row from the 'packaging_types' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 07/15/11 12:03:04
 *
 * @package    lib.model.om
 */
abstract class BasePackagingTypes extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        PackagingTypesPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the group_id field.
	 * @var        int
	 */
	protected $group_id;

	/**
	 * The value for the courier_id field.
	 * @var        int
	 */
	protected $courier_id;

	/**
	 * The value for the name field.
	 * @var        string
	 */
	protected $name;

	/**
	 * The value for the service_id field.
	 * @var        string
	 */
	protected $service_id;

	/**
	 * The value for the desc field.
	 * @var        string
	 */
	protected $desc;

	/**
	 * The value for the max_width field.
	 * @var        string
	 */
	protected $max_width;

	/**
	 * The value for the max_height field.
	 * @var        string
	 */
	protected $max_height;

	/**
	 * The value for the max_length field.
	 * @var        string
	 */
	protected $max_length;

	/**
	 * The value for the max_weight field.
	 * @var        string
	 */
	protected $max_weight;

	/**
	 * The value for the max_lenght field.
	 * @var        string
	 */
	protected $max_lenght;

	/**
	 * The value for the available field.
	 * Note: this column has a database default value of: true
	 * @var        boolean
	 */
	protected $available;

	/**
	 * @var        PackagingGroups
	 */
	protected $aPackagingGroups;

	/**
	 * @var        Courier
	 */
	protected $aCourier;

	/**
	 * @var        array OrderShipping[] Collection to store aggregation of OrderShipping objects.
	 */
	protected $collOrderShippings;

	/**
	 * @var        Criteria The criteria used to select the current contents of collOrderShippings.
	 */
	private $lastOrderShippingCriteria = null;

	/**
	 * @var        array ShippingTypes[] Collection to store aggregation of ShippingTypes objects.
	 */
	protected $collShippingTypess;

	/**
	 * @var        Criteria The criteria used to select the current contents of collShippingTypess.
	 */
	private $lastShippingTypesCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'PackagingTypesPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->available = true;
	}

	/**
	 * Initializes internal state of BasePackagingTypes object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [group_id] column value.
	 * 
	 * @return     int
	 */
	public function getGroupId()
	{
		return $this->group_id;
	}

	/**
	 * Get the [courier_id] column value.
	 * 
	 * @return     int
	 */
	public function getCourierId()
	{
		return $this->courier_id;
	}

	/**
	 * Get the [name] column value.
	 * 
	 * @return     string
	 */
	public function getName()
	{
		return $this->name;
	}

	/**
	 * Get the [service_id] column value.
	 * 
	 * @return     string
	 */
	public function getServiceId()
	{
		return $this->service_id;
	}

	/**
	 * Get the [desc] column value.
	 * 
	 * @return     string
	 */
	public function getDesc()
	{
		return $this->desc;
	}

	/**
	 * Get the [max_width] column value.
	 * 
	 * @return     string
	 */
	public function getMaxWidth()
	{
		return $this->max_width;
	}

	/**
	 * Get the [max_height] column value.
	 * 
	 * @return     string
	 */
	public function getMaxHeight()
	{
		return $this->max_height;
	}

	/**
	 * Get the [max_length] column value.
	 * 
	 * @return     string
	 */
	public function getMaxLength()
	{
		return $this->max_length;
	}

	/**
	 * Get the [max_weight] column value.
	 * 
	 * @return     string
	 */
	public function getMaxWeight()
	{
		return $this->max_weight;
	}

	/**
	 * Get the [max_lenght] column value.
	 * 
	 * @return     string
	 */
	public function getMaxLenght()
	{
		return $this->max_lenght;
	}

	/**
	 * Get the [available] column value.
	 * 
	 * @return     boolean
	 */
	public function getAvailable()
	{
		return $this->available;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     PackagingTypes The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = PackagingTypesPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [group_id] column.
	 * 
	 * @param      int $v new value
	 * @return     PackagingTypes The current object (for fluent API support)
	 */
	public function setGroupId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->group_id !== $v) {
			$this->group_id = $v;
			$this->modifiedColumns[] = PackagingTypesPeer::GROUP_ID;
		}

		if ($this->aPackagingGroups !== null && $this->aPackagingGroups->getId() !== $v) {
			$this->aPackagingGroups = null;
		}

		return $this;
	} // setGroupId()

	/**
	 * Set the value of [courier_id] column.
	 * 
	 * @param      int $v new value
	 * @return     PackagingTypes The current object (for fluent API support)
	 */
	public function setCourierId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->courier_id !== $v) {
			$this->courier_id = $v;
			$this->modifiedColumns[] = PackagingTypesPeer::COURIER_ID;
		}

		if ($this->aCourier !== null && $this->aCourier->getId() !== $v) {
			$this->aCourier = null;
		}

		return $this;
	} // setCourierId()

	/**
	 * Set the value of [name] column.
	 * 
	 * @param      string $v new value
	 * @return     PackagingTypes The current object (for fluent API support)
	 */
	public function setName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->name !== $v) {
			$this->name = $v;
			$this->modifiedColumns[] = PackagingTypesPeer::NAME;
		}

		return $this;
	} // setName()

	/**
	 * Set the value of [service_id] column.
	 * 
	 * @param      string $v new value
	 * @return     PackagingTypes The current object (for fluent API support)
	 */
	public function setServiceId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->service_id !== $v) {
			$this->service_id = $v;
			$this->modifiedColumns[] = PackagingTypesPeer::SERVICE_ID;
		}

		return $this;
	} // setServiceId()

	/**
	 * Set the value of [desc] column.
	 * 
	 * @param      string $v new value
	 * @return     PackagingTypes The current object (for fluent API support)
	 */
	public function setDesc($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->desc !== $v) {
			$this->desc = $v;
			$this->modifiedColumns[] = PackagingTypesPeer::DESC;
		}

		return $this;
	} // setDesc()

	/**
	 * Set the value of [max_width] column.
	 * 
	 * @param      string $v new value
	 * @return     PackagingTypes The current object (for fluent API support)
	 */
	public function setMaxWidth($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->max_width !== $v) {
			$this->max_width = $v;
			$this->modifiedColumns[] = PackagingTypesPeer::MAX_WIDTH;
		}

		return $this;
	} // setMaxWidth()

	/**
	 * Set the value of [max_height] column.
	 * 
	 * @param      string $v new value
	 * @return     PackagingTypes The current object (for fluent API support)
	 */
	public function setMaxHeight($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->max_height !== $v) {
			$this->max_height = $v;
			$this->modifiedColumns[] = PackagingTypesPeer::MAX_HEIGHT;
		}

		return $this;
	} // setMaxHeight()

	/**
	 * Set the value of [max_length] column.
	 * 
	 * @param      string $v new value
	 * @return     PackagingTypes The current object (for fluent API support)
	 */
	public function setMaxLength($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->max_length !== $v) {
			$this->max_length = $v;
			$this->modifiedColumns[] = PackagingTypesPeer::MAX_LENGTH;
		}

		return $this;
	} // setMaxLength()

	/**
	 * Set the value of [max_weight] column.
	 * 
	 * @param      string $v new value
	 * @return     PackagingTypes The current object (for fluent API support)
	 */
	public function setMaxWeight($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->max_weight !== $v) {
			$this->max_weight = $v;
			$this->modifiedColumns[] = PackagingTypesPeer::MAX_WEIGHT;
		}

		return $this;
	} // setMaxWeight()

	/**
	 * Set the value of [max_lenght] column.
	 * 
	 * @param      string $v new value
	 * @return     PackagingTypes The current object (for fluent API support)
	 */
	public function setMaxLenght($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->max_lenght !== $v) {
			$this->max_lenght = $v;
			$this->modifiedColumns[] = PackagingTypesPeer::MAX_LENGHT;
		}

		return $this;
	} // setMaxLenght()

	/**
	 * Set the value of [available] column.
	 * 
	 * @param      boolean $v new value
	 * @return     PackagingTypes The current object (for fluent API support)
	 */
	public function setAvailable($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->available !== $v || $this->isNew()) {
			$this->available = $v;
			$this->modifiedColumns[] = PackagingTypesPeer::AVAILABLE;
		}

		return $this;
	} // setAvailable()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->available !== true) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->group_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->courier_id = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->name = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->service_id = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->desc = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->max_width = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->max_height = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->max_length = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->max_weight = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->max_lenght = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->available = ($row[$startcol + 11] !== null) ? (boolean) $row[$startcol + 11] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 12; // 12 = PackagingTypesPeer::NUM_COLUMNS - PackagingTypesPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating PackagingTypes object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aPackagingGroups !== null && $this->group_id !== $this->aPackagingGroups->getId()) {
			$this->aPackagingGroups = null;
		}
		if ($this->aCourier !== null && $this->courier_id !== $this->aCourier->getId()) {
			$this->aCourier = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PackagingTypesPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = PackagingTypesPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aPackagingGroups = null;
			$this->aCourier = null;
			$this->collOrderShippings = null;
			$this->lastOrderShippingCriteria = null;

			$this->collShippingTypess = null;
			$this->lastShippingTypesCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PackagingTypesPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasePackagingTypes:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				PackagingTypesPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasePackagingTypes:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(PackagingTypesPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasePackagingTypes:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasePackagingTypes:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				PackagingTypesPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aPackagingGroups !== null) {
				if ($this->aPackagingGroups->isModified() || $this->aPackagingGroups->isNew()) {
					$affectedRows += $this->aPackagingGroups->save($con);
				}
				$this->setPackagingGroups($this->aPackagingGroups);
			}

			if ($this->aCourier !== null) {
				if ($this->aCourier->isModified() || $this->aCourier->isNew()) {
					$affectedRows += $this->aCourier->save($con);
				}
				$this->setCourier($this->aCourier);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = PackagingTypesPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = PackagingTypesPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += PackagingTypesPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collOrderShippings !== null) {
				foreach ($this->collOrderShippings as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collShippingTypess !== null) {
				foreach ($this->collShippingTypess as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aPackagingGroups !== null) {
				if (!$this->aPackagingGroups->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aPackagingGroups->getValidationFailures());
				}
			}

			if ($this->aCourier !== null) {
				if (!$this->aCourier->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCourier->getValidationFailures());
				}
			}


			if (($retval = PackagingTypesPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collOrderShippings !== null) {
					foreach ($this->collOrderShippings as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collShippingTypess !== null) {
					foreach ($this->collShippingTypess as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PackagingTypesPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getGroupId();
				break;
			case 2:
				return $this->getCourierId();
				break;
			case 3:
				return $this->getName();
				break;
			case 4:
				return $this->getServiceId();
				break;
			case 5:
				return $this->getDesc();
				break;
			case 6:
				return $this->getMaxWidth();
				break;
			case 7:
				return $this->getMaxHeight();
				break;
			case 8:
				return $this->getMaxLength();
				break;
			case 9:
				return $this->getMaxWeight();
				break;
			case 10:
				return $this->getMaxLenght();
				break;
			case 11:
				return $this->getAvailable();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = PackagingTypesPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getGroupId(),
			$keys[2] => $this->getCourierId(),
			$keys[3] => $this->getName(),
			$keys[4] => $this->getServiceId(),
			$keys[5] => $this->getDesc(),
			$keys[6] => $this->getMaxWidth(),
			$keys[7] => $this->getMaxHeight(),
			$keys[8] => $this->getMaxLength(),
			$keys[9] => $this->getMaxWeight(),
			$keys[10] => $this->getMaxLenght(),
			$keys[11] => $this->getAvailable(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = PackagingTypesPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setGroupId($value);
				break;
			case 2:
				$this->setCourierId($value);
				break;
			case 3:
				$this->setName($value);
				break;
			case 4:
				$this->setServiceId($value);
				break;
			case 5:
				$this->setDesc($value);
				break;
			case 6:
				$this->setMaxWidth($value);
				break;
			case 7:
				$this->setMaxHeight($value);
				break;
			case 8:
				$this->setMaxLength($value);
				break;
			case 9:
				$this->setMaxWeight($value);
				break;
			case 10:
				$this->setMaxLenght($value);
				break;
			case 11:
				$this->setAvailable($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = PackagingTypesPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setGroupId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setCourierId($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setName($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setServiceId($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setDesc($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setMaxWidth($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setMaxHeight($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setMaxLength($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setMaxWeight($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setMaxLenght($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setAvailable($arr[$keys[11]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(PackagingTypesPeer::DATABASE_NAME);

		if ($this->isColumnModified(PackagingTypesPeer::ID)) $criteria->add(PackagingTypesPeer::ID, $this->id);
		if ($this->isColumnModified(PackagingTypesPeer::GROUP_ID)) $criteria->add(PackagingTypesPeer::GROUP_ID, $this->group_id);
		if ($this->isColumnModified(PackagingTypesPeer::COURIER_ID)) $criteria->add(PackagingTypesPeer::COURIER_ID, $this->courier_id);
		if ($this->isColumnModified(PackagingTypesPeer::NAME)) $criteria->add(PackagingTypesPeer::NAME, $this->name);
		if ($this->isColumnModified(PackagingTypesPeer::SERVICE_ID)) $criteria->add(PackagingTypesPeer::SERVICE_ID, $this->service_id);
		if ($this->isColumnModified(PackagingTypesPeer::DESC)) $criteria->add(PackagingTypesPeer::DESC, $this->desc);
		if ($this->isColumnModified(PackagingTypesPeer::MAX_WIDTH)) $criteria->add(PackagingTypesPeer::MAX_WIDTH, $this->max_width);
		if ($this->isColumnModified(PackagingTypesPeer::MAX_HEIGHT)) $criteria->add(PackagingTypesPeer::MAX_HEIGHT, $this->max_height);
		if ($this->isColumnModified(PackagingTypesPeer::MAX_LENGTH)) $criteria->add(PackagingTypesPeer::MAX_LENGTH, $this->max_length);
		if ($this->isColumnModified(PackagingTypesPeer::MAX_WEIGHT)) $criteria->add(PackagingTypesPeer::MAX_WEIGHT, $this->max_weight);
		if ($this->isColumnModified(PackagingTypesPeer::MAX_LENGHT)) $criteria->add(PackagingTypesPeer::MAX_LENGHT, $this->max_lenght);
		if ($this->isColumnModified(PackagingTypesPeer::AVAILABLE)) $criteria->add(PackagingTypesPeer::AVAILABLE, $this->available);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(PackagingTypesPeer::DATABASE_NAME);

		$criteria->add(PackagingTypesPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of PackagingTypes (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setGroupId($this->group_id);

		$copyObj->setCourierId($this->courier_id);

		$copyObj->setName($this->name);

		$copyObj->setServiceId($this->service_id);

		$copyObj->setDesc($this->desc);

		$copyObj->setMaxWidth($this->max_width);

		$copyObj->setMaxHeight($this->max_height);

		$copyObj->setMaxLength($this->max_length);

		$copyObj->setMaxWeight($this->max_weight);

		$copyObj->setMaxLenght($this->max_lenght);

		$copyObj->setAvailable($this->available);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getOrderShippings() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addOrderShipping($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getShippingTypess() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addShippingTypes($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     PackagingTypes Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     PackagingTypesPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new PackagingTypesPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a PackagingGroups object.
	 *
	 * @param      PackagingGroups $v
	 * @return     PackagingTypes The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setPackagingGroups(PackagingGroups $v = null)
	{
		if ($v === null) {
			$this->setGroupId(NULL);
		} else {
			$this->setGroupId($v->getId());
		}

		$this->aPackagingGroups = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the PackagingGroups object, it will not be re-added.
		if ($v !== null) {
			$v->addPackagingTypes($this);
		}

		return $this;
	}


	/**
	 * Get the associated PackagingGroups object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     PackagingGroups The associated PackagingGroups object.
	 * @throws     PropelException
	 */
	public function getPackagingGroups(PropelPDO $con = null)
	{
		if ($this->aPackagingGroups === null && ($this->group_id !== null)) {
			$this->aPackagingGroups = PackagingGroupsPeer::retrieveByPk($this->group_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aPackagingGroups->addPackagingTypess($this);
			 */
		}
		return $this->aPackagingGroups;
	}

	/**
	 * Declares an association between this object and a Courier object.
	 *
	 * @param      Courier $v
	 * @return     PackagingTypes The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCourier(Courier $v = null)
	{
		if ($v === null) {
			$this->setCourierId(NULL);
		} else {
			$this->setCourierId($v->getId());
		}

		$this->aCourier = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Courier object, it will not be re-added.
		if ($v !== null) {
			$v->addPackagingTypes($this);
		}

		return $this;
	}


	/**
	 * Get the associated Courier object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Courier The associated Courier object.
	 * @throws     PropelException
	 */
	public function getCourier(PropelPDO $con = null)
	{
		if ($this->aCourier === null && ($this->courier_id !== null)) {
			$this->aCourier = CourierPeer::retrieveByPk($this->courier_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCourier->addPackagingTypess($this);
			 */
		}
		return $this->aCourier;
	}

	/**
	 * Clears out the collOrderShippings collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addOrderShippings()
	 */
	public function clearOrderShippings()
	{
		$this->collOrderShippings = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collOrderShippings collection (array).
	 *
	 * By default this just sets the collOrderShippings collection to an empty array (like clearcollOrderShippings());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initOrderShippings()
	{
		$this->collOrderShippings = array();
	}

	/**
	 * Gets an array of OrderShipping objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PackagingTypes has previously been saved, it will retrieve
	 * related OrderShippings from storage. If this PackagingTypes is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array OrderShipping[]
	 * @throws     PropelException
	 */
	public function getOrderShippings($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PackagingTypesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collOrderShippings === null) {
			if ($this->isNew()) {
			   $this->collOrderShippings = array();
			} else {

				$criteria->add(OrderShippingPeer::PACKAGING_TYPE_ID, $this->id);

				OrderShippingPeer::addSelectColumns($criteria);
				$this->collOrderShippings = OrderShippingPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(OrderShippingPeer::PACKAGING_TYPE_ID, $this->id);

				OrderShippingPeer::addSelectColumns($criteria);
				if (!isset($this->lastOrderShippingCriteria) || !$this->lastOrderShippingCriteria->equals($criteria)) {
					$this->collOrderShippings = OrderShippingPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastOrderShippingCriteria = $criteria;
		return $this->collOrderShippings;
	}

	/**
	 * Returns the number of related OrderShipping objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related OrderShipping objects.
	 * @throws     PropelException
	 */
	public function countOrderShippings(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PackagingTypesPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collOrderShippings === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(OrderShippingPeer::PACKAGING_TYPE_ID, $this->id);

				$count = OrderShippingPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(OrderShippingPeer::PACKAGING_TYPE_ID, $this->id);

				if (!isset($this->lastOrderShippingCriteria) || !$this->lastOrderShippingCriteria->equals($criteria)) {
					$count = OrderShippingPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collOrderShippings);
				}
			} else {
				$count = count($this->collOrderShippings);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a OrderShipping object to this object
	 * through the OrderShipping foreign key attribute.
	 *
	 * @param      OrderShipping $l OrderShipping
	 * @return     void
	 * @throws     PropelException
	 */
	public function addOrderShipping(OrderShipping $l)
	{
		if ($this->collOrderShippings === null) {
			$this->initOrderShippings();
		}
		if (!in_array($l, $this->collOrderShippings, true)) { // only add it if the **same** object is not already associated
			array_push($this->collOrderShippings, $l);
			$l->setPackagingTypes($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PackagingTypes is new, it will return
	 * an empty collection; or if this PackagingTypes has previously
	 * been saved, it will retrieve related OrderShippings from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PackagingTypes.
	 */
	public function getOrderShippingsJoinUsers($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PackagingTypesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collOrderShippings === null) {
			if ($this->isNew()) {
				$this->collOrderShippings = array();
			} else {

				$criteria->add(OrderShippingPeer::PACKAGING_TYPE_ID, $this->id);

				$this->collOrderShippings = OrderShippingPeer::doSelectJoinUsers($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(OrderShippingPeer::PACKAGING_TYPE_ID, $this->id);

			if (!isset($this->lastOrderShippingCriteria) || !$this->lastOrderShippingCriteria->equals($criteria)) {
				$this->collOrderShippings = OrderShippingPeer::doSelectJoinUsers($criteria, $con, $join_behavior);
			}
		}
		$this->lastOrderShippingCriteria = $criteria;

		return $this->collOrderShippings;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PackagingTypes is new, it will return
	 * an empty collection; or if this PackagingTypes has previously
	 * been saved, it will retrieve related OrderShippings from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PackagingTypes.
	 */
	public function getOrderShippingsJoinCourier($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PackagingTypesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collOrderShippings === null) {
			if ($this->isNew()) {
				$this->collOrderShippings = array();
			} else {

				$criteria->add(OrderShippingPeer::PACKAGING_TYPE_ID, $this->id);

				$this->collOrderShippings = OrderShippingPeer::doSelectJoinCourier($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(OrderShippingPeer::PACKAGING_TYPE_ID, $this->id);

			if (!isset($this->lastOrderShippingCriteria) || !$this->lastOrderShippingCriteria->equals($criteria)) {
				$this->collOrderShippings = OrderShippingPeer::doSelectJoinCourier($criteria, $con, $join_behavior);
			}
		}
		$this->lastOrderShippingCriteria = $criteria;

		return $this->collOrderShippings;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PackagingTypes is new, it will return
	 * an empty collection; or if this PackagingTypes has previously
	 * been saved, it will retrieve related OrderShippings from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PackagingTypes.
	 */
	public function getOrderShippingsJoinShippingTypes($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PackagingTypesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collOrderShippings === null) {
			if ($this->isNew()) {
				$this->collOrderShippings = array();
			} else {

				$criteria->add(OrderShippingPeer::PACKAGING_TYPE_ID, $this->id);

				$this->collOrderShippings = OrderShippingPeer::doSelectJoinShippingTypes($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(OrderShippingPeer::PACKAGING_TYPE_ID, $this->id);

			if (!isset($this->lastOrderShippingCriteria) || !$this->lastOrderShippingCriteria->equals($criteria)) {
				$this->collOrderShippings = OrderShippingPeer::doSelectJoinShippingTypes($criteria, $con, $join_behavior);
			}
		}
		$this->lastOrderShippingCriteria = $criteria;

		return $this->collOrderShippings;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PackagingTypes is new, it will return
	 * an empty collection; or if this PackagingTypes has previously
	 * been saved, it will retrieve related OrderShippings from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PackagingTypes.
	 */
	public function getOrderShippingsJoinZones($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PackagingTypesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collOrderShippings === null) {
			if ($this->isNew()) {
				$this->collOrderShippings = array();
			} else {

				$criteria->add(OrderShippingPeer::PACKAGING_TYPE_ID, $this->id);

				$this->collOrderShippings = OrderShippingPeer::doSelectJoinZones($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(OrderShippingPeer::PACKAGING_TYPE_ID, $this->id);

			if (!isset($this->lastOrderShippingCriteria) || !$this->lastOrderShippingCriteria->equals($criteria)) {
				$this->collOrderShippings = OrderShippingPeer::doSelectJoinZones($criteria, $con, $join_behavior);
			}
		}
		$this->lastOrderShippingCriteria = $criteria;

		return $this->collOrderShippings;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PackagingTypes is new, it will return
	 * an empty collection; or if this PackagingTypes has previously
	 * been saved, it will retrieve related OrderShippings from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PackagingTypes.
	 */
	public function getOrderShippingsJoinCountries($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PackagingTypesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collOrderShippings === null) {
			if ($this->isNew()) {
				$this->collOrderShippings = array();
			} else {

				$criteria->add(OrderShippingPeer::PACKAGING_TYPE_ID, $this->id);

				$this->collOrderShippings = OrderShippingPeer::doSelectJoinCountries($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(OrderShippingPeer::PACKAGING_TYPE_ID, $this->id);

			if (!isset($this->lastOrderShippingCriteria) || !$this->lastOrderShippingCriteria->equals($criteria)) {
				$this->collOrderShippings = OrderShippingPeer::doSelectJoinCountries($criteria, $con, $join_behavior);
			}
		}
		$this->lastOrderShippingCriteria = $criteria;

		return $this->collOrderShippings;
	}

	/**
	 * Clears out the collShippingTypess collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addShippingTypess()
	 */
	public function clearShippingTypess()
	{
		$this->collShippingTypess = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collShippingTypess collection (array).
	 *
	 * By default this just sets the collShippingTypess collection to an empty array (like clearcollShippingTypess());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initShippingTypess()
	{
		$this->collShippingTypess = array();
	}

	/**
	 * Gets an array of ShippingTypes objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this PackagingTypes has previously been saved, it will retrieve
	 * related ShippingTypess from storage. If this PackagingTypes is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ShippingTypes[]
	 * @throws     PropelException
	 */
	public function getShippingTypess($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PackagingTypesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collShippingTypess === null) {
			if ($this->isNew()) {
			   $this->collShippingTypess = array();
			} else {

				$criteria->add(ShippingTypesPeer::PACKAGING_TYPE_ID, $this->id);

				ShippingTypesPeer::addSelectColumns($criteria);
				$this->collShippingTypess = ShippingTypesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ShippingTypesPeer::PACKAGING_TYPE_ID, $this->id);

				ShippingTypesPeer::addSelectColumns($criteria);
				if (!isset($this->lastShippingTypesCriteria) || !$this->lastShippingTypesCriteria->equals($criteria)) {
					$this->collShippingTypess = ShippingTypesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastShippingTypesCriteria = $criteria;
		return $this->collShippingTypess;
	}

	/**
	 * Returns the number of related ShippingTypes objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ShippingTypes objects.
	 * @throws     PropelException
	 */
	public function countShippingTypess(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PackagingTypesPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collShippingTypess === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ShippingTypesPeer::PACKAGING_TYPE_ID, $this->id);

				$count = ShippingTypesPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ShippingTypesPeer::PACKAGING_TYPE_ID, $this->id);

				if (!isset($this->lastShippingTypesCriteria) || !$this->lastShippingTypesCriteria->equals($criteria)) {
					$count = ShippingTypesPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collShippingTypess);
				}
			} else {
				$count = count($this->collShippingTypess);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ShippingTypes object to this object
	 * through the ShippingTypes foreign key attribute.
	 *
	 * @param      ShippingTypes $l ShippingTypes
	 * @return     void
	 * @throws     PropelException
	 */
	public function addShippingTypes(ShippingTypes $l)
	{
		if ($this->collShippingTypess === null) {
			$this->initShippingTypess();
		}
		if (!in_array($l, $this->collShippingTypess, true)) { // only add it if the **same** object is not already associated
			array_push($this->collShippingTypess, $l);
			$l->setPackagingTypes($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PackagingTypes is new, it will return
	 * an empty collection; or if this PackagingTypes has previously
	 * been saved, it will retrieve related ShippingTypess from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PackagingTypes.
	 */
	public function getShippingTypessJoinShippingTypesGroups($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PackagingTypesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collShippingTypess === null) {
			if ($this->isNew()) {
				$this->collShippingTypess = array();
			} else {

				$criteria->add(ShippingTypesPeer::PACKAGING_TYPE_ID, $this->id);

				$this->collShippingTypess = ShippingTypesPeer::doSelectJoinShippingTypesGroups($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ShippingTypesPeer::PACKAGING_TYPE_ID, $this->id);

			if (!isset($this->lastShippingTypesCriteria) || !$this->lastShippingTypesCriteria->equals($criteria)) {
				$this->collShippingTypess = ShippingTypesPeer::doSelectJoinShippingTypesGroups($criteria, $con, $join_behavior);
			}
		}
		$this->lastShippingTypesCriteria = $criteria;

		return $this->collShippingTypess;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this PackagingTypes is new, it will return
	 * an empty collection; or if this PackagingTypes has previously
	 * been saved, it will retrieve related ShippingTypess from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in PackagingTypes.
	 */
	public function getShippingTypessJoinCountries($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(PackagingTypesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collShippingTypess === null) {
			if ($this->isNew()) {
				$this->collShippingTypess = array();
			} else {

				$criteria->add(ShippingTypesPeer::PACKAGING_TYPE_ID, $this->id);

				$this->collShippingTypess = ShippingTypesPeer::doSelectJoinCountries($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ShippingTypesPeer::PACKAGING_TYPE_ID, $this->id);

			if (!isset($this->lastShippingTypesCriteria) || !$this->lastShippingTypesCriteria->equals($criteria)) {
				$this->collShippingTypess = ShippingTypesPeer::doSelectJoinCountries($criteria, $con, $join_behavior);
			}
		}
		$this->lastShippingTypesCriteria = $criteria;

		return $this->collShippingTypess;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collOrderShippings) {
				foreach ((array) $this->collOrderShippings as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collShippingTypess) {
				foreach ((array) $this->collShippingTypess as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collOrderShippings = null;
		$this->collShippingTypess = null;
			$this->aPackagingGroups = null;
			$this->aCourier = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BasePackagingTypes:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BasePackagingTypes::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BasePackagingTypes
