<?php

/**
 * Base class that represents a row from the 'order_shipping' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 07/15/11 12:03:04
 *
 * @package    lib.model.om
 */
abstract class BaseOrderShipping extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        OrderShippingPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the user_id field.
	 * @var        int
	 */
	protected $user_id;

	/**
	 * The value for the is_international field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $is_international;

	/**
	 * The value for the number field.
	 * @var        string
	 */
	protected $number;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * The value for the status field.
	 * @var        string
	 */
	protected $status;

	/**
	 * The value for the outher_order_number field.
	 * @var        string
	 */
	protected $outher_order_number;

	/**
	 * The value for the list_number field.
	 * @var        string
	 */
	protected $list_number;

	/**
	 * The value for the courier_id field.
	 * @var        int
	 */
	protected $courier_id;

	/**
	 * The value for the width field.
	 * @var        string
	 */
	protected $width;

	/**
	 * The value for the height field.
	 * @var        string
	 */
	protected $height;

	/**
	 * The value for the length field.
	 * @var        string
	 */
	protected $length;

	/**
	 * The value for the normal_weight field.
	 * @var        string
	 */
	protected $normal_weight;

	/**
	 * The value for the weight field.
	 * @var        string
	 */
	protected $weight;

	/**
	 * The value for the type_id field.
	 * @var        int
	 */
	protected $type_id;

	/**
	 * The value for the zone_id field.
	 * @var        int
	 */
	protected $zone_id;

	/**
	 * The value for the country_id field.
	 * @var        int
	 */
	protected $country_id;

	/**
	 * The value for the packaging_type_id field.
	 * @var        int
	 */
	protected $packaging_type_id;

	/**
	 * The value for the date_of_receipt field.
	 * @var        string
	 */
	protected $date_of_receipt;

	/**
	 * The value for the receipt_time_start field.
	 * @var        string
	 */
	protected $receipt_time_start;

	/**
	 * The value for the receipt_time_end field.
	 * @var        string
	 */
	protected $receipt_time_end;

	/**
	 * The value for the self_giving field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $self_giving;

	/**
	 * The value for the self_giving_date field.
	 * @var        string
	 */
	protected $self_giving_date;

	/**
	 * The value for the is_paid field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $is_paid;

	/**
	 * The value for the paid_type field.
	 * @var        int
	 */
	protected $paid_type;

	/**
	 * The value for the number_of_packages field.
	 * @var        int
	 */
	protected $number_of_packages;

	/**
	 * The value for the amount field.
	 * @var        string
	 */
	protected $amount;

	/**
	 * The value for the vat field.
	 * @var        string
	 */
	protected $vat;

	/**
	 * The value for the vat_amount field.
	 * @var        string
	 */
	protected $vat_amount;

	/**
	 * The value for the total_amount field.
	 * @var        string
	 */
	protected $total_amount;

	/**
	 * The value for the notes field.
	 * @var        string
	 */
	protected $notes;

	/**
	 * @var        Users
	 */
	protected $aUsers;

	/**
	 * @var        Courier
	 */
	protected $aCourier;

	/**
	 * @var        ShippingTypes
	 */
	protected $aShippingTypes;

	/**
	 * @var        Zones
	 */
	protected $aZones;

	/**
	 * @var        Countries
	 */
	protected $aCountries;

	/**
	 * @var        PackagingTypes
	 */
	protected $aPackagingTypes;

	/**
	 * @var        array OrderShippingOptions[] Collection to store aggregation of OrderShippingOptions objects.
	 */
	protected $collOrderShippingOptionss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collOrderShippingOptionss.
	 */
	private $lastOrderShippingOptionsCriteria = null;

	/**
	 * @var        array OrderShippingZonesServices[] Collection to store aggregation of OrderShippingZonesServices objects.
	 */
	protected $collOrderShippingZonesServicess;

	/**
	 * @var        Criteria The criteria used to select the current contents of collOrderShippingZonesServicess.
	 */
	private $lastOrderShippingZonesServicesCriteria = null;

	/**
	 * @var        array OrderShippingSender[] Collection to store aggregation of OrderShippingSender objects.
	 */
	protected $collOrderShippingSenders;

	/**
	 * @var        Criteria The criteria used to select the current contents of collOrderShippingSenders.
	 */
	private $lastOrderShippingSenderCriteria = null;

	/**
	 * @var        array OrderShippingRecipient[] Collection to store aggregation of OrderShippingRecipient objects.
	 */
	protected $collOrderShippingRecipients;

	/**
	 * @var        Criteria The criteria used to select the current contents of collOrderShippingRecipients.
	 */
	private $lastOrderShippingRecipientCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'OrderShippingPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->is_international = false;
		$this->self_giving = false;
		$this->is_paid = false;
	}

	/**
	 * Initializes internal state of BaseOrderShipping object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [user_id] column value.
	 * 
	 * @return     int
	 */
	public function getUserId()
	{
		return $this->user_id;
	}

	/**
	 * Get the [is_international] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsInternational()
	{
		return $this->is_international;
	}

	/**
	 * Get the [number] column value.
	 * 
	 * @return     string
	 */
	public function getNumber()
	{
		return $this->number;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [status] column value.
	 * 
	 * @return     string
	 */
	public function getStatus()
	{
		return $this->status;
	}

	/**
	 * Get the [outher_order_number] column value.
	 * 
	 * @return     string
	 */
	public function getOutherOrderNumber()
	{
		return $this->outher_order_number;
	}

	/**
	 * Get the [list_number] column value.
	 * 
	 * @return     string
	 */
	public function getListNumber()
	{
		return $this->list_number;
	}

	/**
	 * Get the [courier_id] column value.
	 * 
	 * @return     int
	 */
	public function getCourierId()
	{
		return $this->courier_id;
	}

	/**
	 * Get the [width] column value.
	 * 
	 * @return     string
	 */
	public function getWidth()
	{
		return $this->width;
	}

	/**
	 * Get the [height] column value.
	 * 
	 * @return     string
	 */
	public function getHeight()
	{
		return $this->height;
	}

	/**
	 * Get the [length] column value.
	 * 
	 * @return     string
	 */
	public function getLength()
	{
		return $this->length;
	}

	/**
	 * Get the [normal_weight] column value.
	 * 
	 * @return     string
	 */
	public function getNormalWeight()
	{
		return $this->normal_weight;
	}

	/**
	 * Get the [weight] column value.
	 * 
	 * @return     string
	 */
	public function getWeight()
	{
		return $this->weight;
	}

	/**
	 * Get the [type_id] column value.
	 * 
	 * @return     int
	 */
	public function getTypeId()
	{
		return $this->type_id;
	}

	/**
	 * Get the [zone_id] column value.
	 * 
	 * @return     int
	 */
	public function getZoneId()
	{
		return $this->zone_id;
	}

	/**
	 * Get the [country_id] column value.
	 * 
	 * @return     int
	 */
	public function getCountryId()
	{
		return $this->country_id;
	}

	/**
	 * Get the [packaging_type_id] column value.
	 * 
	 * @return     int
	 */
	public function getPackagingTypeId()
	{
		return $this->packaging_type_id;
	}

	/**
	 * Get the [optionally formatted] temporal [date_of_receipt] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDateOfReceipt($format = 'Y-m-d')
	{
		if ($this->date_of_receipt === null) {
			return null;
		}


		if ($this->date_of_receipt === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->date_of_receipt);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->date_of_receipt, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [receipt_time_start] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getReceiptTimeStart($format = 'H:i:s')
	{
		if ($this->receipt_time_start === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->receipt_time_start);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->receipt_time_start, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [receipt_time_end] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getReceiptTimeEnd($format = 'H:i:s')
	{
		if ($this->receipt_time_end === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->receipt_time_end);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->receipt_time_end, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [self_giving] column value.
	 * 
	 * @return     boolean
	 */
	public function getSelfGiving()
	{
		return $this->self_giving;
	}

	/**
	 * Get the [optionally formatted] temporal [self_giving_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getSelfGivingDate($format = 'Y-m-d')
	{
		if ($this->self_giving_date === null) {
			return null;
		}


		if ($this->self_giving_date === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->self_giving_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->self_giving_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [is_paid] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsPaid()
	{
		return $this->is_paid;
	}

	/**
	 * Get the [paid_type] column value.
	 * 
	 * @return     int
	 */
	public function getPaidType()
	{
		return $this->paid_type;
	}

	/**
	 * Get the [number_of_packages] column value.
	 * 
	 * @return     int
	 */
	public function getNumberOfPackages()
	{
		return $this->number_of_packages;
	}

	/**
	 * Get the [amount] column value.
	 * 
	 * @return     string
	 */
	public function getAmount()
	{
		return $this->amount;
	}

	/**
	 * Get the [vat] column value.
	 * 
	 * @return     string
	 */
	public function getVat()
	{
		return $this->vat;
	}

	/**
	 * Get the [vat_amount] column value.
	 * 
	 * @return     string
	 */
	public function getVatAmount()
	{
		return $this->vat_amount;
	}

	/**
	 * Get the [total_amount] column value.
	 * 
	 * @return     string
	 */
	public function getTotalAmount()
	{
		return $this->total_amount;
	}

	/**
	 * Get the [notes] column value.
	 * 
	 * @return     string
	 */
	public function getNotes()
	{
		return $this->notes;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = OrderShippingPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [user_id] column.
	 * 
	 * @param      int $v new value
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setUserId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->user_id !== $v) {
			$this->user_id = $v;
			$this->modifiedColumns[] = OrderShippingPeer::USER_ID;
		}

		if ($this->aUsers !== null && $this->aUsers->getId() !== $v) {
			$this->aUsers = null;
		}

		return $this;
	} // setUserId()

	/**
	 * Set the value of [is_international] column.
	 * 
	 * @param      boolean $v new value
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setIsInternational($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_international !== $v || $this->isNew()) {
			$this->is_international = $v;
			$this->modifiedColumns[] = OrderShippingPeer::IS_INTERNATIONAL;
		}

		return $this;
	} // setIsInternational()

	/**
	 * Set the value of [number] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setNumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->number !== $v) {
			$this->number = $v;
			$this->modifiedColumns[] = OrderShippingPeer::NUMBER;
		}

		return $this;
	} // setNumber()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = OrderShippingPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = OrderShippingPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Set the value of [status] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setStatus($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->status !== $v) {
			$this->status = $v;
			$this->modifiedColumns[] = OrderShippingPeer::STATUS;
		}

		return $this;
	} // setStatus()

	/**
	 * Set the value of [outher_order_number] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setOutherOrderNumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->outher_order_number !== $v) {
			$this->outher_order_number = $v;
			$this->modifiedColumns[] = OrderShippingPeer::OUTHER_ORDER_NUMBER;
		}

		return $this;
	} // setOutherOrderNumber()

	/**
	 * Set the value of [list_number] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setListNumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->list_number !== $v) {
			$this->list_number = $v;
			$this->modifiedColumns[] = OrderShippingPeer::LIST_NUMBER;
		}

		return $this;
	} // setListNumber()

	/**
	 * Set the value of [courier_id] column.
	 * 
	 * @param      int $v new value
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setCourierId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->courier_id !== $v) {
			$this->courier_id = $v;
			$this->modifiedColumns[] = OrderShippingPeer::COURIER_ID;
		}

		if ($this->aCourier !== null && $this->aCourier->getId() !== $v) {
			$this->aCourier = null;
		}

		return $this;
	} // setCourierId()

	/**
	 * Set the value of [width] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setWidth($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->width !== $v) {
			$this->width = $v;
			$this->modifiedColumns[] = OrderShippingPeer::WIDTH;
		}

		return $this;
	} // setWidth()

	/**
	 * Set the value of [height] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setHeight($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->height !== $v) {
			$this->height = $v;
			$this->modifiedColumns[] = OrderShippingPeer::HEIGHT;
		}

		return $this;
	} // setHeight()

	/**
	 * Set the value of [length] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setLength($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->length !== $v) {
			$this->length = $v;
			$this->modifiedColumns[] = OrderShippingPeer::LENGTH;
		}

		return $this;
	} // setLength()

	/**
	 * Set the value of [normal_weight] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setNormalWeight($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->normal_weight !== $v) {
			$this->normal_weight = $v;
			$this->modifiedColumns[] = OrderShippingPeer::NORMAL_WEIGHT;
		}

		return $this;
	} // setNormalWeight()

	/**
	 * Set the value of [weight] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setWeight($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->weight !== $v) {
			$this->weight = $v;
			$this->modifiedColumns[] = OrderShippingPeer::WEIGHT;
		}

		return $this;
	} // setWeight()

	/**
	 * Set the value of [type_id] column.
	 * 
	 * @param      int $v new value
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setTypeId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->type_id !== $v) {
			$this->type_id = $v;
			$this->modifiedColumns[] = OrderShippingPeer::TYPE_ID;
		}

		if ($this->aShippingTypes !== null && $this->aShippingTypes->getId() !== $v) {
			$this->aShippingTypes = null;
		}

		return $this;
	} // setTypeId()

	/**
	 * Set the value of [zone_id] column.
	 * 
	 * @param      int $v new value
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setZoneId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->zone_id !== $v) {
			$this->zone_id = $v;
			$this->modifiedColumns[] = OrderShippingPeer::ZONE_ID;
		}

		if ($this->aZones !== null && $this->aZones->getId() !== $v) {
			$this->aZones = null;
		}

		return $this;
	} // setZoneId()

	/**
	 * Set the value of [country_id] column.
	 * 
	 * @param      int $v new value
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setCountryId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->country_id !== $v) {
			$this->country_id = $v;
			$this->modifiedColumns[] = OrderShippingPeer::COUNTRY_ID;
		}

		if ($this->aCountries !== null && $this->aCountries->getId() !== $v) {
			$this->aCountries = null;
		}

		return $this;
	} // setCountryId()

	/**
	 * Set the value of [packaging_type_id] column.
	 * 
	 * @param      int $v new value
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setPackagingTypeId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->packaging_type_id !== $v) {
			$this->packaging_type_id = $v;
			$this->modifiedColumns[] = OrderShippingPeer::PACKAGING_TYPE_ID;
		}

		if ($this->aPackagingTypes !== null && $this->aPackagingTypes->getId() !== $v) {
			$this->aPackagingTypes = null;
		}

		return $this;
	} // setPackagingTypeId()

	/**
	 * Sets the value of [date_of_receipt] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setDateOfReceipt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->date_of_receipt !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->date_of_receipt !== null && $tmpDt = new DateTime($this->date_of_receipt)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->date_of_receipt = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = OrderShippingPeer::DATE_OF_RECEIPT;
			}
		} // if either are not null

		return $this;
	} // setDateOfReceipt()

	/**
	 * Sets the value of [receipt_time_start] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setReceiptTimeStart($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->receipt_time_start !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->receipt_time_start !== null && $tmpDt = new DateTime($this->receipt_time_start)) ? $tmpDt->format('H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->receipt_time_start = ($dt ? $dt->format('H:i:s') : null);
				$this->modifiedColumns[] = OrderShippingPeer::RECEIPT_TIME_START;
			}
		} // if either are not null

		return $this;
	} // setReceiptTimeStart()

	/**
	 * Sets the value of [receipt_time_end] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setReceiptTimeEnd($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->receipt_time_end !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->receipt_time_end !== null && $tmpDt = new DateTime($this->receipt_time_end)) ? $tmpDt->format('H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->receipt_time_end = ($dt ? $dt->format('H:i:s') : null);
				$this->modifiedColumns[] = OrderShippingPeer::RECEIPT_TIME_END;
			}
		} // if either are not null

		return $this;
	} // setReceiptTimeEnd()

	/**
	 * Set the value of [self_giving] column.
	 * 
	 * @param      boolean $v new value
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setSelfGiving($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->self_giving !== $v || $this->isNew()) {
			$this->self_giving = $v;
			$this->modifiedColumns[] = OrderShippingPeer::SELF_GIVING;
		}

		return $this;
	} // setSelfGiving()

	/**
	 * Sets the value of [self_giving_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setSelfGivingDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->self_giving_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->self_giving_date !== null && $tmpDt = new DateTime($this->self_giving_date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->self_giving_date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = OrderShippingPeer::SELF_GIVING_DATE;
			}
		} // if either are not null

		return $this;
	} // setSelfGivingDate()

	/**
	 * Set the value of [is_paid] column.
	 * 
	 * @param      boolean $v new value
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setIsPaid($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_paid !== $v || $this->isNew()) {
			$this->is_paid = $v;
			$this->modifiedColumns[] = OrderShippingPeer::IS_PAID;
		}

		return $this;
	} // setIsPaid()

	/**
	 * Set the value of [paid_type] column.
	 * 
	 * @param      int $v new value
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setPaidType($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->paid_type !== $v) {
			$this->paid_type = $v;
			$this->modifiedColumns[] = OrderShippingPeer::PAID_TYPE;
		}

		return $this;
	} // setPaidType()

	/**
	 * Set the value of [number_of_packages] column.
	 * 
	 * @param      int $v new value
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setNumberOfPackages($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->number_of_packages !== $v) {
			$this->number_of_packages = $v;
			$this->modifiedColumns[] = OrderShippingPeer::NUMBER_OF_PACKAGES;
		}

		return $this;
	} // setNumberOfPackages()

	/**
	 * Set the value of [amount] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setAmount($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->amount !== $v) {
			$this->amount = $v;
			$this->modifiedColumns[] = OrderShippingPeer::AMOUNT;
		}

		return $this;
	} // setAmount()

	/**
	 * Set the value of [vat] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setVat($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->vat !== $v) {
			$this->vat = $v;
			$this->modifiedColumns[] = OrderShippingPeer::VAT;
		}

		return $this;
	} // setVat()

	/**
	 * Set the value of [vat_amount] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setVatAmount($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->vat_amount !== $v) {
			$this->vat_amount = $v;
			$this->modifiedColumns[] = OrderShippingPeer::VAT_AMOUNT;
		}

		return $this;
	} // setVatAmount()

	/**
	 * Set the value of [total_amount] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setTotalAmount($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->total_amount !== $v) {
			$this->total_amount = $v;
			$this->modifiedColumns[] = OrderShippingPeer::TOTAL_AMOUNT;
		}

		return $this;
	} // setTotalAmount()

	/**
	 * Set the value of [notes] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShipping The current object (for fluent API support)
	 */
	public function setNotes($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->notes !== $v) {
			$this->notes = $v;
			$this->modifiedColumns[] = OrderShippingPeer::NOTES;
		}

		return $this;
	} // setNotes()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->is_international !== false) {
				return false;
			}

			if ($this->self_giving !== false) {
				return false;
			}

			if ($this->is_paid !== false) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->user_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->is_international = ($row[$startcol + 2] !== null) ? (boolean) $row[$startcol + 2] : null;
			$this->number = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->created_at = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->updated_at = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->status = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->outher_order_number = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->list_number = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->courier_id = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->width = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->height = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->length = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->normal_weight = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->weight = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->type_id = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->zone_id = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->country_id = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->packaging_type_id = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->date_of_receipt = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->receipt_time_start = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->receipt_time_end = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->self_giving = ($row[$startcol + 22] !== null) ? (boolean) $row[$startcol + 22] : null;
			$this->self_giving_date = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->is_paid = ($row[$startcol + 24] !== null) ? (boolean) $row[$startcol + 24] : null;
			$this->paid_type = ($row[$startcol + 25] !== null) ? (int) $row[$startcol + 25] : null;
			$this->number_of_packages = ($row[$startcol + 26] !== null) ? (int) $row[$startcol + 26] : null;
			$this->amount = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->vat = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->vat_amount = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->total_amount = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->notes = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 32; // 32 = OrderShippingPeer::NUM_COLUMNS - OrderShippingPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating OrderShipping object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aUsers !== null && $this->user_id !== $this->aUsers->getId()) {
			$this->aUsers = null;
		}
		if ($this->aCourier !== null && $this->courier_id !== $this->aCourier->getId()) {
			$this->aCourier = null;
		}
		if ($this->aShippingTypes !== null && $this->type_id !== $this->aShippingTypes->getId()) {
			$this->aShippingTypes = null;
		}
		if ($this->aZones !== null && $this->zone_id !== $this->aZones->getId()) {
			$this->aZones = null;
		}
		if ($this->aCountries !== null && $this->country_id !== $this->aCountries->getId()) {
			$this->aCountries = null;
		}
		if ($this->aPackagingTypes !== null && $this->packaging_type_id !== $this->aPackagingTypes->getId()) {
			$this->aPackagingTypes = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(OrderShippingPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = OrderShippingPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aUsers = null;
			$this->aCourier = null;
			$this->aShippingTypes = null;
			$this->aZones = null;
			$this->aCountries = null;
			$this->aPackagingTypes = null;
			$this->collOrderShippingOptionss = null;
			$this->lastOrderShippingOptionsCriteria = null;

			$this->collOrderShippingZonesServicess = null;
			$this->lastOrderShippingZonesServicesCriteria = null;

			$this->collOrderShippingSenders = null;
			$this->lastOrderShippingSenderCriteria = null;

			$this->collOrderShippingRecipients = null;
			$this->lastOrderShippingRecipientCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(OrderShippingPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseOrderShipping:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				OrderShippingPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseOrderShipping:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(OrderShippingPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseOrderShipping:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(OrderShippingPeer::UPDATED_AT))
			{
			  $this->setUpdatedAt(time());
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(OrderShippingPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseOrderShipping:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				OrderShippingPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aUsers !== null) {
				if ($this->aUsers->isModified() || $this->aUsers->isNew()) {
					$affectedRows += $this->aUsers->save($con);
				}
				$this->setUsers($this->aUsers);
			}

			if ($this->aCourier !== null) {
				if ($this->aCourier->isModified() || $this->aCourier->isNew()) {
					$affectedRows += $this->aCourier->save($con);
				}
				$this->setCourier($this->aCourier);
			}

			if ($this->aShippingTypes !== null) {
				if ($this->aShippingTypes->isModified() || $this->aShippingTypes->isNew()) {
					$affectedRows += $this->aShippingTypes->save($con);
				}
				$this->setShippingTypes($this->aShippingTypes);
			}

			if ($this->aZones !== null) {
				if ($this->aZones->isModified() || $this->aZones->isNew()) {
					$affectedRows += $this->aZones->save($con);
				}
				$this->setZones($this->aZones);
			}

			if ($this->aCountries !== null) {
				if ($this->aCountries->isModified() || $this->aCountries->isNew()) {
					$affectedRows += $this->aCountries->save($con);
				}
				$this->setCountries($this->aCountries);
			}

			if ($this->aPackagingTypes !== null) {
				if ($this->aPackagingTypes->isModified() || $this->aPackagingTypes->isNew()) {
					$affectedRows += $this->aPackagingTypes->save($con);
				}
				$this->setPackagingTypes($this->aPackagingTypes);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = OrderShippingPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = OrderShippingPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += OrderShippingPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collOrderShippingOptionss !== null) {
				foreach ($this->collOrderShippingOptionss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collOrderShippingZonesServicess !== null) {
				foreach ($this->collOrderShippingZonesServicess as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collOrderShippingSenders !== null) {
				foreach ($this->collOrderShippingSenders as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collOrderShippingRecipients !== null) {
				foreach ($this->collOrderShippingRecipients as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aUsers !== null) {
				if (!$this->aUsers->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aUsers->getValidationFailures());
				}
			}

			if ($this->aCourier !== null) {
				if (!$this->aCourier->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCourier->getValidationFailures());
				}
			}

			if ($this->aShippingTypes !== null) {
				if (!$this->aShippingTypes->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aShippingTypes->getValidationFailures());
				}
			}

			if ($this->aZones !== null) {
				if (!$this->aZones->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aZones->getValidationFailures());
				}
			}

			if ($this->aCountries !== null) {
				if (!$this->aCountries->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCountries->getValidationFailures());
				}
			}

			if ($this->aPackagingTypes !== null) {
				if (!$this->aPackagingTypes->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aPackagingTypes->getValidationFailures());
				}
			}


			if (($retval = OrderShippingPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collOrderShippingOptionss !== null) {
					foreach ($this->collOrderShippingOptionss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collOrderShippingZonesServicess !== null) {
					foreach ($this->collOrderShippingZonesServicess as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collOrderShippingSenders !== null) {
					foreach ($this->collOrderShippingSenders as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collOrderShippingRecipients !== null) {
					foreach ($this->collOrderShippingRecipients as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = OrderShippingPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getUserId();
				break;
			case 2:
				return $this->getIsInternational();
				break;
			case 3:
				return $this->getNumber();
				break;
			case 4:
				return $this->getCreatedAt();
				break;
			case 5:
				return $this->getUpdatedAt();
				break;
			case 6:
				return $this->getStatus();
				break;
			case 7:
				return $this->getOutherOrderNumber();
				break;
			case 8:
				return $this->getListNumber();
				break;
			case 9:
				return $this->getCourierId();
				break;
			case 10:
				return $this->getWidth();
				break;
			case 11:
				return $this->getHeight();
				break;
			case 12:
				return $this->getLength();
				break;
			case 13:
				return $this->getNormalWeight();
				break;
			case 14:
				return $this->getWeight();
				break;
			case 15:
				return $this->getTypeId();
				break;
			case 16:
				return $this->getZoneId();
				break;
			case 17:
				return $this->getCountryId();
				break;
			case 18:
				return $this->getPackagingTypeId();
				break;
			case 19:
				return $this->getDateOfReceipt();
				break;
			case 20:
				return $this->getReceiptTimeStart();
				break;
			case 21:
				return $this->getReceiptTimeEnd();
				break;
			case 22:
				return $this->getSelfGiving();
				break;
			case 23:
				return $this->getSelfGivingDate();
				break;
			case 24:
				return $this->getIsPaid();
				break;
			case 25:
				return $this->getPaidType();
				break;
			case 26:
				return $this->getNumberOfPackages();
				break;
			case 27:
				return $this->getAmount();
				break;
			case 28:
				return $this->getVat();
				break;
			case 29:
				return $this->getVatAmount();
				break;
			case 30:
				return $this->getTotalAmount();
				break;
			case 31:
				return $this->getNotes();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = OrderShippingPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getUserId(),
			$keys[2] => $this->getIsInternational(),
			$keys[3] => $this->getNumber(),
			$keys[4] => $this->getCreatedAt(),
			$keys[5] => $this->getUpdatedAt(),
			$keys[6] => $this->getStatus(),
			$keys[7] => $this->getOutherOrderNumber(),
			$keys[8] => $this->getListNumber(),
			$keys[9] => $this->getCourierId(),
			$keys[10] => $this->getWidth(),
			$keys[11] => $this->getHeight(),
			$keys[12] => $this->getLength(),
			$keys[13] => $this->getNormalWeight(),
			$keys[14] => $this->getWeight(),
			$keys[15] => $this->getTypeId(),
			$keys[16] => $this->getZoneId(),
			$keys[17] => $this->getCountryId(),
			$keys[18] => $this->getPackagingTypeId(),
			$keys[19] => $this->getDateOfReceipt(),
			$keys[20] => $this->getReceiptTimeStart(),
			$keys[21] => $this->getReceiptTimeEnd(),
			$keys[22] => $this->getSelfGiving(),
			$keys[23] => $this->getSelfGivingDate(),
			$keys[24] => $this->getIsPaid(),
			$keys[25] => $this->getPaidType(),
			$keys[26] => $this->getNumberOfPackages(),
			$keys[27] => $this->getAmount(),
			$keys[28] => $this->getVat(),
			$keys[29] => $this->getVatAmount(),
			$keys[30] => $this->getTotalAmount(),
			$keys[31] => $this->getNotes(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = OrderShippingPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setUserId($value);
				break;
			case 2:
				$this->setIsInternational($value);
				break;
			case 3:
				$this->setNumber($value);
				break;
			case 4:
				$this->setCreatedAt($value);
				break;
			case 5:
				$this->setUpdatedAt($value);
				break;
			case 6:
				$this->setStatus($value);
				break;
			case 7:
				$this->setOutherOrderNumber($value);
				break;
			case 8:
				$this->setListNumber($value);
				break;
			case 9:
				$this->setCourierId($value);
				break;
			case 10:
				$this->setWidth($value);
				break;
			case 11:
				$this->setHeight($value);
				break;
			case 12:
				$this->setLength($value);
				break;
			case 13:
				$this->setNormalWeight($value);
				break;
			case 14:
				$this->setWeight($value);
				break;
			case 15:
				$this->setTypeId($value);
				break;
			case 16:
				$this->setZoneId($value);
				break;
			case 17:
				$this->setCountryId($value);
				break;
			case 18:
				$this->setPackagingTypeId($value);
				break;
			case 19:
				$this->setDateOfReceipt($value);
				break;
			case 20:
				$this->setReceiptTimeStart($value);
				break;
			case 21:
				$this->setReceiptTimeEnd($value);
				break;
			case 22:
				$this->setSelfGiving($value);
				break;
			case 23:
				$this->setSelfGivingDate($value);
				break;
			case 24:
				$this->setIsPaid($value);
				break;
			case 25:
				$this->setPaidType($value);
				break;
			case 26:
				$this->setNumberOfPackages($value);
				break;
			case 27:
				$this->setAmount($value);
				break;
			case 28:
				$this->setVat($value);
				break;
			case 29:
				$this->setVatAmount($value);
				break;
			case 30:
				$this->setTotalAmount($value);
				break;
			case 31:
				$this->setNotes($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = OrderShippingPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setUserId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setIsInternational($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setNumber($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCreatedAt($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setUpdatedAt($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setStatus($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setOutherOrderNumber($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setListNumber($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setCourierId($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setWidth($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setHeight($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setLength($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setNormalWeight($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setWeight($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setTypeId($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setZoneId($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setCountryId($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setPackagingTypeId($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setDateOfReceipt($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setReceiptTimeStart($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setReceiptTimeEnd($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setSelfGiving($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setSelfGivingDate($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setIsPaid($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setPaidType($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setNumberOfPackages($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setAmount($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setVat($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setVatAmount($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setTotalAmount($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setNotes($arr[$keys[31]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(OrderShippingPeer::DATABASE_NAME);

		if ($this->isColumnModified(OrderShippingPeer::ID)) $criteria->add(OrderShippingPeer::ID, $this->id);
		if ($this->isColumnModified(OrderShippingPeer::USER_ID)) $criteria->add(OrderShippingPeer::USER_ID, $this->user_id);
		if ($this->isColumnModified(OrderShippingPeer::IS_INTERNATIONAL)) $criteria->add(OrderShippingPeer::IS_INTERNATIONAL, $this->is_international);
		if ($this->isColumnModified(OrderShippingPeer::NUMBER)) $criteria->add(OrderShippingPeer::NUMBER, $this->number);
		if ($this->isColumnModified(OrderShippingPeer::CREATED_AT)) $criteria->add(OrderShippingPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(OrderShippingPeer::UPDATED_AT)) $criteria->add(OrderShippingPeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(OrderShippingPeer::STATUS)) $criteria->add(OrderShippingPeer::STATUS, $this->status);
		if ($this->isColumnModified(OrderShippingPeer::OUTHER_ORDER_NUMBER)) $criteria->add(OrderShippingPeer::OUTHER_ORDER_NUMBER, $this->outher_order_number);
		if ($this->isColumnModified(OrderShippingPeer::LIST_NUMBER)) $criteria->add(OrderShippingPeer::LIST_NUMBER, $this->list_number);
		if ($this->isColumnModified(OrderShippingPeer::COURIER_ID)) $criteria->add(OrderShippingPeer::COURIER_ID, $this->courier_id);
		if ($this->isColumnModified(OrderShippingPeer::WIDTH)) $criteria->add(OrderShippingPeer::WIDTH, $this->width);
		if ($this->isColumnModified(OrderShippingPeer::HEIGHT)) $criteria->add(OrderShippingPeer::HEIGHT, $this->height);
		if ($this->isColumnModified(OrderShippingPeer::LENGTH)) $criteria->add(OrderShippingPeer::LENGTH, $this->length);
		if ($this->isColumnModified(OrderShippingPeer::NORMAL_WEIGHT)) $criteria->add(OrderShippingPeer::NORMAL_WEIGHT, $this->normal_weight);
		if ($this->isColumnModified(OrderShippingPeer::WEIGHT)) $criteria->add(OrderShippingPeer::WEIGHT, $this->weight);
		if ($this->isColumnModified(OrderShippingPeer::TYPE_ID)) $criteria->add(OrderShippingPeer::TYPE_ID, $this->type_id);
		if ($this->isColumnModified(OrderShippingPeer::ZONE_ID)) $criteria->add(OrderShippingPeer::ZONE_ID, $this->zone_id);
		if ($this->isColumnModified(OrderShippingPeer::COUNTRY_ID)) $criteria->add(OrderShippingPeer::COUNTRY_ID, $this->country_id);
		if ($this->isColumnModified(OrderShippingPeer::PACKAGING_TYPE_ID)) $criteria->add(OrderShippingPeer::PACKAGING_TYPE_ID, $this->packaging_type_id);
		if ($this->isColumnModified(OrderShippingPeer::DATE_OF_RECEIPT)) $criteria->add(OrderShippingPeer::DATE_OF_RECEIPT, $this->date_of_receipt);
		if ($this->isColumnModified(OrderShippingPeer::RECEIPT_TIME_START)) $criteria->add(OrderShippingPeer::RECEIPT_TIME_START, $this->receipt_time_start);
		if ($this->isColumnModified(OrderShippingPeer::RECEIPT_TIME_END)) $criteria->add(OrderShippingPeer::RECEIPT_TIME_END, $this->receipt_time_end);
		if ($this->isColumnModified(OrderShippingPeer::SELF_GIVING)) $criteria->add(OrderShippingPeer::SELF_GIVING, $this->self_giving);
		if ($this->isColumnModified(OrderShippingPeer::SELF_GIVING_DATE)) $criteria->add(OrderShippingPeer::SELF_GIVING_DATE, $this->self_giving_date);
		if ($this->isColumnModified(OrderShippingPeer::IS_PAID)) $criteria->add(OrderShippingPeer::IS_PAID, $this->is_paid);
		if ($this->isColumnModified(OrderShippingPeer::PAID_TYPE)) $criteria->add(OrderShippingPeer::PAID_TYPE, $this->paid_type);
		if ($this->isColumnModified(OrderShippingPeer::NUMBER_OF_PACKAGES)) $criteria->add(OrderShippingPeer::NUMBER_OF_PACKAGES, $this->number_of_packages);
		if ($this->isColumnModified(OrderShippingPeer::AMOUNT)) $criteria->add(OrderShippingPeer::AMOUNT, $this->amount);
		if ($this->isColumnModified(OrderShippingPeer::VAT)) $criteria->add(OrderShippingPeer::VAT, $this->vat);
		if ($this->isColumnModified(OrderShippingPeer::VAT_AMOUNT)) $criteria->add(OrderShippingPeer::VAT_AMOUNT, $this->vat_amount);
		if ($this->isColumnModified(OrderShippingPeer::TOTAL_AMOUNT)) $criteria->add(OrderShippingPeer::TOTAL_AMOUNT, $this->total_amount);
		if ($this->isColumnModified(OrderShippingPeer::NOTES)) $criteria->add(OrderShippingPeer::NOTES, $this->notes);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(OrderShippingPeer::DATABASE_NAME);

		$criteria->add(OrderShippingPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of OrderShipping (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setUserId($this->user_id);

		$copyObj->setIsInternational($this->is_international);

		$copyObj->setNumber($this->number);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);

		$copyObj->setStatus($this->status);

		$copyObj->setOutherOrderNumber($this->outher_order_number);

		$copyObj->setListNumber($this->list_number);

		$copyObj->setCourierId($this->courier_id);

		$copyObj->setWidth($this->width);

		$copyObj->setHeight($this->height);

		$copyObj->setLength($this->length);

		$copyObj->setNormalWeight($this->normal_weight);

		$copyObj->setWeight($this->weight);

		$copyObj->setTypeId($this->type_id);

		$copyObj->setZoneId($this->zone_id);

		$copyObj->setCountryId($this->country_id);

		$copyObj->setPackagingTypeId($this->packaging_type_id);

		$copyObj->setDateOfReceipt($this->date_of_receipt);

		$copyObj->setReceiptTimeStart($this->receipt_time_start);

		$copyObj->setReceiptTimeEnd($this->receipt_time_end);

		$copyObj->setSelfGiving($this->self_giving);

		$copyObj->setSelfGivingDate($this->self_giving_date);

		$copyObj->setIsPaid($this->is_paid);

		$copyObj->setPaidType($this->paid_type);

		$copyObj->setNumberOfPackages($this->number_of_packages);

		$copyObj->setAmount($this->amount);

		$copyObj->setVat($this->vat);

		$copyObj->setVatAmount($this->vat_amount);

		$copyObj->setTotalAmount($this->total_amount);

		$copyObj->setNotes($this->notes);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getOrderShippingOptionss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addOrderShippingOptions($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getOrderShippingZonesServicess() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addOrderShippingZonesServices($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getOrderShippingSenders() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addOrderShippingSender($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getOrderShippingRecipients() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addOrderShippingRecipient($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     OrderShipping Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     OrderShippingPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new OrderShippingPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Users object.
	 *
	 * @param      Users $v
	 * @return     OrderShipping The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setUsers(Users $v = null)
	{
		if ($v === null) {
			$this->setUserId(NULL);
		} else {
			$this->setUserId($v->getId());
		}

		$this->aUsers = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Users object, it will not be re-added.
		if ($v !== null) {
			$v->addOrderShipping($this);
		}

		return $this;
	}


	/**
	 * Get the associated Users object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Users The associated Users object.
	 * @throws     PropelException
	 */
	public function getUsers(PropelPDO $con = null)
	{
		if ($this->aUsers === null && ($this->user_id !== null)) {
			$this->aUsers = UsersPeer::retrieveByPk($this->user_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aUsers->addOrderShippings($this);
			 */
		}
		return $this->aUsers;
	}

	/**
	 * Declares an association between this object and a Courier object.
	 *
	 * @param      Courier $v
	 * @return     OrderShipping The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCourier(Courier $v = null)
	{
		if ($v === null) {
			$this->setCourierId(NULL);
		} else {
			$this->setCourierId($v->getId());
		}

		$this->aCourier = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Courier object, it will not be re-added.
		if ($v !== null) {
			$v->addOrderShipping($this);
		}

		return $this;
	}


	/**
	 * Get the associated Courier object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Courier The associated Courier object.
	 * @throws     PropelException
	 */
	public function getCourier(PropelPDO $con = null)
	{
		if ($this->aCourier === null && ($this->courier_id !== null)) {
			$this->aCourier = CourierPeer::retrieveByPk($this->courier_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCourier->addOrderShippings($this);
			 */
		}
		return $this->aCourier;
	}

	/**
	 * Declares an association between this object and a ShippingTypes object.
	 *
	 * @param      ShippingTypes $v
	 * @return     OrderShipping The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setShippingTypes(ShippingTypes $v = null)
	{
		if ($v === null) {
			$this->setTypeId(NULL);
		} else {
			$this->setTypeId($v->getId());
		}

		$this->aShippingTypes = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the ShippingTypes object, it will not be re-added.
		if ($v !== null) {
			$v->addOrderShipping($this);
		}

		return $this;
	}


	/**
	 * Get the associated ShippingTypes object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     ShippingTypes The associated ShippingTypes object.
	 * @throws     PropelException
	 */
	public function getShippingTypes(PropelPDO $con = null)
	{
		if ($this->aShippingTypes === null && ($this->type_id !== null)) {
			$this->aShippingTypes = ShippingTypesPeer::retrieveByPk($this->type_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aShippingTypes->addOrderShippings($this);
			 */
		}
		return $this->aShippingTypes;
	}

	/**
	 * Declares an association between this object and a Zones object.
	 *
	 * @param      Zones $v
	 * @return     OrderShipping The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setZones(Zones $v = null)
	{
		if ($v === null) {
			$this->setZoneId(NULL);
		} else {
			$this->setZoneId($v->getId());
		}

		$this->aZones = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Zones object, it will not be re-added.
		if ($v !== null) {
			$v->addOrderShipping($this);
		}

		return $this;
	}


	/**
	 * Get the associated Zones object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Zones The associated Zones object.
	 * @throws     PropelException
	 */
	public function getZones(PropelPDO $con = null)
	{
		if ($this->aZones === null && ($this->zone_id !== null)) {
			$this->aZones = ZonesPeer::retrieveByPk($this->zone_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aZones->addOrderShippings($this);
			 */
		}
		return $this->aZones;
	}

	/**
	 * Declares an association between this object and a Countries object.
	 *
	 * @param      Countries $v
	 * @return     OrderShipping The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCountries(Countries $v = null)
	{
		if ($v === null) {
			$this->setCountryId(NULL);
		} else {
			$this->setCountryId($v->getId());
		}

		$this->aCountries = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Countries object, it will not be re-added.
		if ($v !== null) {
			$v->addOrderShipping($this);
		}

		return $this;
	}


	/**
	 * Get the associated Countries object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Countries The associated Countries object.
	 * @throws     PropelException
	 */
	public function getCountries(PropelPDO $con = null)
	{
		if ($this->aCountries === null && ($this->country_id !== null)) {
			$this->aCountries = CountriesPeer::retrieveByPk($this->country_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCountries->addOrderShippings($this);
			 */
		}
		return $this->aCountries;
	}

	/**
	 * Declares an association between this object and a PackagingTypes object.
	 *
	 * @param      PackagingTypes $v
	 * @return     OrderShipping The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setPackagingTypes(PackagingTypes $v = null)
	{
		if ($v === null) {
			$this->setPackagingTypeId(NULL);
		} else {
			$this->setPackagingTypeId($v->getId());
		}

		$this->aPackagingTypes = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the PackagingTypes object, it will not be re-added.
		if ($v !== null) {
			$v->addOrderShipping($this);
		}

		return $this;
	}


	/**
	 * Get the associated PackagingTypes object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     PackagingTypes The associated PackagingTypes object.
	 * @throws     PropelException
	 */
	public function getPackagingTypes(PropelPDO $con = null)
	{
		if ($this->aPackagingTypes === null && ($this->packaging_type_id !== null)) {
			$this->aPackagingTypes = PackagingTypesPeer::retrieveByPk($this->packaging_type_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aPackagingTypes->addOrderShippings($this);
			 */
		}
		return $this->aPackagingTypes;
	}

	/**
	 * Clears out the collOrderShippingOptionss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addOrderShippingOptionss()
	 */
	public function clearOrderShippingOptionss()
	{
		$this->collOrderShippingOptionss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collOrderShippingOptionss collection (array).
	 *
	 * By default this just sets the collOrderShippingOptionss collection to an empty array (like clearcollOrderShippingOptionss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initOrderShippingOptionss()
	{
		$this->collOrderShippingOptionss = array();
	}

	/**
	 * Gets an array of OrderShippingOptions objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this OrderShipping has previously been saved, it will retrieve
	 * related OrderShippingOptionss from storage. If this OrderShipping is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array OrderShippingOptions[]
	 * @throws     PropelException
	 */
	public function getOrderShippingOptionss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(OrderShippingPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collOrderShippingOptionss === null) {
			if ($this->isNew()) {
			   $this->collOrderShippingOptionss = array();
			} else {

				$criteria->add(OrderShippingOptionsPeer::ORDER_ID, $this->id);

				OrderShippingOptionsPeer::addSelectColumns($criteria);
				$this->collOrderShippingOptionss = OrderShippingOptionsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(OrderShippingOptionsPeer::ORDER_ID, $this->id);

				OrderShippingOptionsPeer::addSelectColumns($criteria);
				if (!isset($this->lastOrderShippingOptionsCriteria) || !$this->lastOrderShippingOptionsCriteria->equals($criteria)) {
					$this->collOrderShippingOptionss = OrderShippingOptionsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastOrderShippingOptionsCriteria = $criteria;
		return $this->collOrderShippingOptionss;
	}

	/**
	 * Returns the number of related OrderShippingOptions objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related OrderShippingOptions objects.
	 * @throws     PropelException
	 */
	public function countOrderShippingOptionss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(OrderShippingPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collOrderShippingOptionss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(OrderShippingOptionsPeer::ORDER_ID, $this->id);

				$count = OrderShippingOptionsPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(OrderShippingOptionsPeer::ORDER_ID, $this->id);

				if (!isset($this->lastOrderShippingOptionsCriteria) || !$this->lastOrderShippingOptionsCriteria->equals($criteria)) {
					$count = OrderShippingOptionsPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collOrderShippingOptionss);
				}
			} else {
				$count = count($this->collOrderShippingOptionss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a OrderShippingOptions object to this object
	 * through the OrderShippingOptions foreign key attribute.
	 *
	 * @param      OrderShippingOptions $l OrderShippingOptions
	 * @return     void
	 * @throws     PropelException
	 */
	public function addOrderShippingOptions(OrderShippingOptions $l)
	{
		if ($this->collOrderShippingOptionss === null) {
			$this->initOrderShippingOptionss();
		}
		if (!in_array($l, $this->collOrderShippingOptionss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collOrderShippingOptionss, $l);
			$l->setOrderShipping($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this OrderShipping is new, it will return
	 * an empty collection; or if this OrderShipping has previously
	 * been saved, it will retrieve related OrderShippingOptionss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in OrderShipping.
	 */
	public function getOrderShippingOptionssJoinShippingOptions($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(OrderShippingPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collOrderShippingOptionss === null) {
			if ($this->isNew()) {
				$this->collOrderShippingOptionss = array();
			} else {

				$criteria->add(OrderShippingOptionsPeer::ORDER_ID, $this->id);

				$this->collOrderShippingOptionss = OrderShippingOptionsPeer::doSelectJoinShippingOptions($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(OrderShippingOptionsPeer::ORDER_ID, $this->id);

			if (!isset($this->lastOrderShippingOptionsCriteria) || !$this->lastOrderShippingOptionsCriteria->equals($criteria)) {
				$this->collOrderShippingOptionss = OrderShippingOptionsPeer::doSelectJoinShippingOptions($criteria, $con, $join_behavior);
			}
		}
		$this->lastOrderShippingOptionsCriteria = $criteria;

		return $this->collOrderShippingOptionss;
	}

	/**
	 * Clears out the collOrderShippingZonesServicess collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addOrderShippingZonesServicess()
	 */
	public function clearOrderShippingZonesServicess()
	{
		$this->collOrderShippingZonesServicess = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collOrderShippingZonesServicess collection (array).
	 *
	 * By default this just sets the collOrderShippingZonesServicess collection to an empty array (like clearcollOrderShippingZonesServicess());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initOrderShippingZonesServicess()
	{
		$this->collOrderShippingZonesServicess = array();
	}

	/**
	 * Gets an array of OrderShippingZonesServices objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this OrderShipping has previously been saved, it will retrieve
	 * related OrderShippingZonesServicess from storage. If this OrderShipping is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array OrderShippingZonesServices[]
	 * @throws     PropelException
	 */
	public function getOrderShippingZonesServicess($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(OrderShippingPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collOrderShippingZonesServicess === null) {
			if ($this->isNew()) {
			   $this->collOrderShippingZonesServicess = array();
			} else {

				$criteria->add(OrderShippingZonesServicesPeer::ORDER_ID, $this->id);

				OrderShippingZonesServicesPeer::addSelectColumns($criteria);
				$this->collOrderShippingZonesServicess = OrderShippingZonesServicesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(OrderShippingZonesServicesPeer::ORDER_ID, $this->id);

				OrderShippingZonesServicesPeer::addSelectColumns($criteria);
				if (!isset($this->lastOrderShippingZonesServicesCriteria) || !$this->lastOrderShippingZonesServicesCriteria->equals($criteria)) {
					$this->collOrderShippingZonesServicess = OrderShippingZonesServicesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastOrderShippingZonesServicesCriteria = $criteria;
		return $this->collOrderShippingZonesServicess;
	}

	/**
	 * Returns the number of related OrderShippingZonesServices objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related OrderShippingZonesServices objects.
	 * @throws     PropelException
	 */
	public function countOrderShippingZonesServicess(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(OrderShippingPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collOrderShippingZonesServicess === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(OrderShippingZonesServicesPeer::ORDER_ID, $this->id);

				$count = OrderShippingZonesServicesPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(OrderShippingZonesServicesPeer::ORDER_ID, $this->id);

				if (!isset($this->lastOrderShippingZonesServicesCriteria) || !$this->lastOrderShippingZonesServicesCriteria->equals($criteria)) {
					$count = OrderShippingZonesServicesPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collOrderShippingZonesServicess);
				}
			} else {
				$count = count($this->collOrderShippingZonesServicess);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a OrderShippingZonesServices object to this object
	 * through the OrderShippingZonesServices foreign key attribute.
	 *
	 * @param      OrderShippingZonesServices $l OrderShippingZonesServices
	 * @return     void
	 * @throws     PropelException
	 */
	public function addOrderShippingZonesServices(OrderShippingZonesServices $l)
	{
		if ($this->collOrderShippingZonesServicess === null) {
			$this->initOrderShippingZonesServicess();
		}
		if (!in_array($l, $this->collOrderShippingZonesServicess, true)) { // only add it if the **same** object is not already associated
			array_push($this->collOrderShippingZonesServicess, $l);
			$l->setOrderShipping($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this OrderShipping is new, it will return
	 * an empty collection; or if this OrderShipping has previously
	 * been saved, it will retrieve related OrderShippingZonesServicess from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in OrderShipping.
	 */
	public function getOrderShippingZonesServicessJoinZonesServices($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(OrderShippingPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collOrderShippingZonesServicess === null) {
			if ($this->isNew()) {
				$this->collOrderShippingZonesServicess = array();
			} else {

				$criteria->add(OrderShippingZonesServicesPeer::ORDER_ID, $this->id);

				$this->collOrderShippingZonesServicess = OrderShippingZonesServicesPeer::doSelectJoinZonesServices($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(OrderShippingZonesServicesPeer::ORDER_ID, $this->id);

			if (!isset($this->lastOrderShippingZonesServicesCriteria) || !$this->lastOrderShippingZonesServicesCriteria->equals($criteria)) {
				$this->collOrderShippingZonesServicess = OrderShippingZonesServicesPeer::doSelectJoinZonesServices($criteria, $con, $join_behavior);
			}
		}
		$this->lastOrderShippingZonesServicesCriteria = $criteria;

		return $this->collOrderShippingZonesServicess;
	}

	/**
	 * Clears out the collOrderShippingSenders collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addOrderShippingSenders()
	 */
	public function clearOrderShippingSenders()
	{
		$this->collOrderShippingSenders = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collOrderShippingSenders collection (array).
	 *
	 * By default this just sets the collOrderShippingSenders collection to an empty array (like clearcollOrderShippingSenders());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initOrderShippingSenders()
	{
		$this->collOrderShippingSenders = array();
	}

	/**
	 * Gets an array of OrderShippingSender objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this OrderShipping has previously been saved, it will retrieve
	 * related OrderShippingSenders from storage. If this OrderShipping is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array OrderShippingSender[]
	 * @throws     PropelException
	 */
	public function getOrderShippingSenders($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(OrderShippingPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collOrderShippingSenders === null) {
			if ($this->isNew()) {
			   $this->collOrderShippingSenders = array();
			} else {

				$criteria->add(OrderShippingSenderPeer::ORDER_ID, $this->id);

				OrderShippingSenderPeer::addSelectColumns($criteria);
				$this->collOrderShippingSenders = OrderShippingSenderPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(OrderShippingSenderPeer::ORDER_ID, $this->id);

				OrderShippingSenderPeer::addSelectColumns($criteria);
				if (!isset($this->lastOrderShippingSenderCriteria) || !$this->lastOrderShippingSenderCriteria->equals($criteria)) {
					$this->collOrderShippingSenders = OrderShippingSenderPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastOrderShippingSenderCriteria = $criteria;
		return $this->collOrderShippingSenders;
	}

	/**
	 * Returns the number of related OrderShippingSender objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related OrderShippingSender objects.
	 * @throws     PropelException
	 */
	public function countOrderShippingSenders(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(OrderShippingPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collOrderShippingSenders === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(OrderShippingSenderPeer::ORDER_ID, $this->id);

				$count = OrderShippingSenderPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(OrderShippingSenderPeer::ORDER_ID, $this->id);

				if (!isset($this->lastOrderShippingSenderCriteria) || !$this->lastOrderShippingSenderCriteria->equals($criteria)) {
					$count = OrderShippingSenderPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collOrderShippingSenders);
				}
			} else {
				$count = count($this->collOrderShippingSenders);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a OrderShippingSender object to this object
	 * through the OrderShippingSender foreign key attribute.
	 *
	 * @param      OrderShippingSender $l OrderShippingSender
	 * @return     void
	 * @throws     PropelException
	 */
	public function addOrderShippingSender(OrderShippingSender $l)
	{
		if ($this->collOrderShippingSenders === null) {
			$this->initOrderShippingSenders();
		}
		if (!in_array($l, $this->collOrderShippingSenders, true)) { // only add it if the **same** object is not already associated
			array_push($this->collOrderShippingSenders, $l);
			$l->setOrderShipping($this);
		}
	}

	/**
	 * Clears out the collOrderShippingRecipients collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addOrderShippingRecipients()
	 */
	public function clearOrderShippingRecipients()
	{
		$this->collOrderShippingRecipients = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collOrderShippingRecipients collection (array).
	 *
	 * By default this just sets the collOrderShippingRecipients collection to an empty array (like clearcollOrderShippingRecipients());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initOrderShippingRecipients()
	{
		$this->collOrderShippingRecipients = array();
	}

	/**
	 * Gets an array of OrderShippingRecipient objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this OrderShipping has previously been saved, it will retrieve
	 * related OrderShippingRecipients from storage. If this OrderShipping is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array OrderShippingRecipient[]
	 * @throws     PropelException
	 */
	public function getOrderShippingRecipients($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(OrderShippingPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collOrderShippingRecipients === null) {
			if ($this->isNew()) {
			   $this->collOrderShippingRecipients = array();
			} else {

				$criteria->add(OrderShippingRecipientPeer::ORDER_ID, $this->id);

				OrderShippingRecipientPeer::addSelectColumns($criteria);
				$this->collOrderShippingRecipients = OrderShippingRecipientPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(OrderShippingRecipientPeer::ORDER_ID, $this->id);

				OrderShippingRecipientPeer::addSelectColumns($criteria);
				if (!isset($this->lastOrderShippingRecipientCriteria) || !$this->lastOrderShippingRecipientCriteria->equals($criteria)) {
					$this->collOrderShippingRecipients = OrderShippingRecipientPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastOrderShippingRecipientCriteria = $criteria;
		return $this->collOrderShippingRecipients;
	}

	/**
	 * Returns the number of related OrderShippingRecipient objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related OrderShippingRecipient objects.
	 * @throws     PropelException
	 */
	public function countOrderShippingRecipients(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(OrderShippingPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collOrderShippingRecipients === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(OrderShippingRecipientPeer::ORDER_ID, $this->id);

				$count = OrderShippingRecipientPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(OrderShippingRecipientPeer::ORDER_ID, $this->id);

				if (!isset($this->lastOrderShippingRecipientCriteria) || !$this->lastOrderShippingRecipientCriteria->equals($criteria)) {
					$count = OrderShippingRecipientPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collOrderShippingRecipients);
				}
			} else {
				$count = count($this->collOrderShippingRecipients);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a OrderShippingRecipient object to this object
	 * through the OrderShippingRecipient foreign key attribute.
	 *
	 * @param      OrderShippingRecipient $l OrderShippingRecipient
	 * @return     void
	 * @throws     PropelException
	 */
	public function addOrderShippingRecipient(OrderShippingRecipient $l)
	{
		if ($this->collOrderShippingRecipients === null) {
			$this->initOrderShippingRecipients();
		}
		if (!in_array($l, $this->collOrderShippingRecipients, true)) { // only add it if the **same** object is not already associated
			array_push($this->collOrderShippingRecipients, $l);
			$l->setOrderShipping($this);
		}
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collOrderShippingOptionss) {
				foreach ((array) $this->collOrderShippingOptionss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collOrderShippingZonesServicess) {
				foreach ((array) $this->collOrderShippingZonesServicess as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collOrderShippingSenders) {
				foreach ((array) $this->collOrderShippingSenders as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collOrderShippingRecipients) {
				foreach ((array) $this->collOrderShippingRecipients as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collOrderShippingOptionss = null;
		$this->collOrderShippingZonesServicess = null;
		$this->collOrderShippingSenders = null;
		$this->collOrderShippingRecipients = null;
			$this->aUsers = null;
			$this->aCourier = null;
			$this->aShippingTypes = null;
			$this->aZones = null;
			$this->aCountries = null;
			$this->aPackagingTypes = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseOrderShipping:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseOrderShipping::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseOrderShipping
