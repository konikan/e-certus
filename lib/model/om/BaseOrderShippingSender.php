<?php

/**
 * Base class that represents a row from the 'order_shipping_sender' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 07/15/11 12:03:06
 *
 * @package    lib.model.om
 */
abstract class BaseOrderShippingSender extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        OrderShippingSenderPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * The value for the is_company field.
	 * @var        int
	 */
	protected $is_company;

	/**
	 * The value for the sender_name field.
	 * @var        string
	 */
	protected $sender_name;

	/**
	 * The value for the contact_name field.
	 * @var        string
	 */
	protected $contact_name;

	/**
	 * The value for the name field.
	 * @var        string
	 */
	protected $name;

	/**
	 * The value for the surname field.
	 * @var        string
	 */
	protected $surname;

	/**
	 * The value for the postcode field.
	 * @var        string
	 */
	protected $postcode;

	/**
	 * The value for the city field.
	 * @var        string
	 */
	protected $city;

	/**
	 * The value for the country field.
	 * Note: this column has a database default value of: 'pl'
	 * @var        string
	 */
	protected $country;

	/**
	 * The value for the street field.
	 * @var        string
	 */
	protected $street;

	/**
	 * The value for the street_nr field.
	 * @var        string
	 */
	protected $street_nr;

	/**
	 * The value for the local_nr field.
	 * @var        string
	 */
	protected $local_nr;

	/**
	 * The value for the tel field.
	 * @var        string
	 */
	protected $tel;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the address field.
	 * @var        string
	 */
	protected $address;

	/**
	 * The value for the bank_name field.
	 * @var        string
	 */
	protected $bank_name;

	/**
	 * The value for the bank_account field.
	 * @var        string
	 */
	protected $bank_account;

	/**
	 * The value for the company_name field.
	 * @var        string
	 */
	protected $company_name;

	/**
	 * The value for the company_nip field.
	 * @var        string
	 */
	protected $company_nip;

	/**
	 * The value for the company_post_code field.
	 * @var        string
	 */
	protected $company_post_code;

	/**
	 * The value for the company_city field.
	 * @var        string
	 */
	protected $company_city;

	/**
	 * The value for the company_street field.
	 * @var        string
	 */
	protected $company_street;

	/**
	 * The value for the company_home_nr field.
	 * @var        string
	 */
	protected $company_home_nr;

	/**
	 * The value for the company_local_nr field.
	 * @var        string
	 */
	protected $company_local_nr;

	/**
	 * The value for the order_id field.
	 * @var        int
	 */
	protected $order_id;

	/**
	 * @var        OrderShipping
	 */
	protected $aOrderShipping;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'OrderShippingSenderPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->country = 'pl';
	}

	/**
	 * Initializes internal state of BaseOrderShippingSender object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [is_company] column value.
	 * 
	 * @return     int
	 */
	public function getIsCompany()
	{
		return $this->is_company;
	}

	/**
	 * Get the [sender_name] column value.
	 * 
	 * @return     string
	 */
	public function getSenderName()
	{
		return $this->sender_name;
	}

	/**
	 * Get the [contact_name] column value.
	 * 
	 * @return     string
	 */
	public function getContactName()
	{
		return $this->contact_name;
	}

	/**
	 * Get the [name] column value.
	 * 
	 * @return     string
	 */
	public function getName()
	{
		return $this->name;
	}

	/**
	 * Get the [surname] column value.
	 * 
	 * @return     string
	 */
	public function getSurname()
	{
		return $this->surname;
	}

	/**
	 * Get the [postcode] column value.
	 * 
	 * @return     string
	 */
	public function getPostcode()
	{
		return $this->postcode;
	}

	/**
	 * Get the [city] column value.
	 * 
	 * @return     string
	 */
	public function getCity()
	{
		return $this->city;
	}

	/**
	 * Get the [country] column value.
	 * 
	 * @return     string
	 */
	public function getCountry()
	{
		return $this->country;
	}

	/**
	 * Get the [street] column value.
	 * 
	 * @return     string
	 */
	public function getStreet()
	{
		return $this->street;
	}

	/**
	 * Get the [street_nr] column value.
	 * 
	 * @return     string
	 */
	public function getStreetNr()
	{
		return $this->street_nr;
	}

	/**
	 * Get the [local_nr] column value.
	 * 
	 * @return     string
	 */
	public function getLocalNr()
	{
		return $this->local_nr;
	}

	/**
	 * Get the [tel] column value.
	 * 
	 * @return     string
	 */
	public function getTel()
	{
		return $this->tel;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [address] column value.
	 * 
	 * @return     string
	 */
	public function getAddress()
	{
		return $this->address;
	}

	/**
	 * Get the [bank_name] column value.
	 * 
	 * @return     string
	 */
	public function getBankName()
	{
		return $this->bank_name;
	}

	/**
	 * Get the [bank_account] column value.
	 * 
	 * @return     string
	 */
	public function getBankAccount()
	{
		return $this->bank_account;
	}

	/**
	 * Get the [company_name] column value.
	 * 
	 * @return     string
	 */
	public function getCompanyName()
	{
		return $this->company_name;
	}

	/**
	 * Get the [company_nip] column value.
	 * 
	 * @return     string
	 */
	public function getCompanyNip()
	{
		return $this->company_nip;
	}

	/**
	 * Get the [company_post_code] column value.
	 * 
	 * @return     string
	 */
	public function getCompanyPostCode()
	{
		return $this->company_post_code;
	}

	/**
	 * Get the [company_city] column value.
	 * 
	 * @return     string
	 */
	public function getCompanyCity()
	{
		return $this->company_city;
	}

	/**
	 * Get the [company_street] column value.
	 * 
	 * @return     string
	 */
	public function getCompanyStreet()
	{
		return $this->company_street;
	}

	/**
	 * Get the [company_home_nr] column value.
	 * 
	 * @return     string
	 */
	public function getCompanyHomeNr()
	{
		return $this->company_home_nr;
	}

	/**
	 * Get the [company_local_nr] column value.
	 * 
	 * @return     string
	 */
	public function getCompanyLocalNr()
	{
		return $this->company_local_nr;
	}

	/**
	 * Get the [order_id] column value.
	 * 
	 * @return     int
	 */
	public function getOrderId()
	{
		return $this->order_id;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     OrderShippingSender The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = OrderShippingSenderPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     OrderShippingSender The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = OrderShippingSenderPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     OrderShippingSender The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = OrderShippingSenderPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Set the value of [is_company] column.
	 * 
	 * @param      int $v new value
	 * @return     OrderShippingSender The current object (for fluent API support)
	 */
	public function setIsCompany($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->is_company !== $v) {
			$this->is_company = $v;
			$this->modifiedColumns[] = OrderShippingSenderPeer::IS_COMPANY;
		}

		return $this;
	} // setIsCompany()

	/**
	 * Set the value of [sender_name] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShippingSender The current object (for fluent API support)
	 */
	public function setSenderName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sender_name !== $v) {
			$this->sender_name = $v;
			$this->modifiedColumns[] = OrderShippingSenderPeer::SENDER_NAME;
		}

		return $this;
	} // setSenderName()

	/**
	 * Set the value of [contact_name] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShippingSender The current object (for fluent API support)
	 */
	public function setContactName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->contact_name !== $v) {
			$this->contact_name = $v;
			$this->modifiedColumns[] = OrderShippingSenderPeer::CONTACT_NAME;
		}

		return $this;
	} // setContactName()

	/**
	 * Set the value of [name] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShippingSender The current object (for fluent API support)
	 */
	public function setName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->name !== $v) {
			$this->name = $v;
			$this->modifiedColumns[] = OrderShippingSenderPeer::NAME;
		}

		return $this;
	} // setName()

	/**
	 * Set the value of [surname] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShippingSender The current object (for fluent API support)
	 */
	public function setSurname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->surname !== $v) {
			$this->surname = $v;
			$this->modifiedColumns[] = OrderShippingSenderPeer::SURNAME;
		}

		return $this;
	} // setSurname()

	/**
	 * Set the value of [postcode] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShippingSender The current object (for fluent API support)
	 */
	public function setPostcode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->postcode !== $v) {
			$this->postcode = $v;
			$this->modifiedColumns[] = OrderShippingSenderPeer::POSTCODE;
		}

		return $this;
	} // setPostcode()

	/**
	 * Set the value of [city] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShippingSender The current object (for fluent API support)
	 */
	public function setCity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->city !== $v) {
			$this->city = $v;
			$this->modifiedColumns[] = OrderShippingSenderPeer::CITY;
		}

		return $this;
	} // setCity()

	/**
	 * Set the value of [country] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShippingSender The current object (for fluent API support)
	 */
	public function setCountry($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->country !== $v || $this->isNew()) {
			$this->country = $v;
			$this->modifiedColumns[] = OrderShippingSenderPeer::COUNTRY;
		}

		return $this;
	} // setCountry()

	/**
	 * Set the value of [street] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShippingSender The current object (for fluent API support)
	 */
	public function setStreet($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->street !== $v) {
			$this->street = $v;
			$this->modifiedColumns[] = OrderShippingSenderPeer::STREET;
		}

		return $this;
	} // setStreet()

	/**
	 * Set the value of [street_nr] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShippingSender The current object (for fluent API support)
	 */
	public function setStreetNr($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->street_nr !== $v) {
			$this->street_nr = $v;
			$this->modifiedColumns[] = OrderShippingSenderPeer::STREET_NR;
		}

		return $this;
	} // setStreetNr()

	/**
	 * Set the value of [local_nr] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShippingSender The current object (for fluent API support)
	 */
	public function setLocalNr($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->local_nr !== $v) {
			$this->local_nr = $v;
			$this->modifiedColumns[] = OrderShippingSenderPeer::LOCAL_NR;
		}

		return $this;
	} // setLocalNr()

	/**
	 * Set the value of [tel] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShippingSender The current object (for fluent API support)
	 */
	public function setTel($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tel !== $v) {
			$this->tel = $v;
			$this->modifiedColumns[] = OrderShippingSenderPeer::TEL;
		}

		return $this;
	} // setTel()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShippingSender The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = OrderShippingSenderPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [address] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShippingSender The current object (for fluent API support)
	 */
	public function setAddress($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->address !== $v) {
			$this->address = $v;
			$this->modifiedColumns[] = OrderShippingSenderPeer::ADDRESS;
		}

		return $this;
	} // setAddress()

	/**
	 * Set the value of [bank_name] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShippingSender The current object (for fluent API support)
	 */
	public function setBankName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->bank_name !== $v) {
			$this->bank_name = $v;
			$this->modifiedColumns[] = OrderShippingSenderPeer::BANK_NAME;
		}

		return $this;
	} // setBankName()

	/**
	 * Set the value of [bank_account] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShippingSender The current object (for fluent API support)
	 */
	public function setBankAccount($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->bank_account !== $v) {
			$this->bank_account = $v;
			$this->modifiedColumns[] = OrderShippingSenderPeer::BANK_ACCOUNT;
		}

		return $this;
	} // setBankAccount()

	/**
	 * Set the value of [company_name] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShippingSender The current object (for fluent API support)
	 */
	public function setCompanyName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->company_name !== $v) {
			$this->company_name = $v;
			$this->modifiedColumns[] = OrderShippingSenderPeer::COMPANY_NAME;
		}

		return $this;
	} // setCompanyName()

	/**
	 * Set the value of [company_nip] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShippingSender The current object (for fluent API support)
	 */
	public function setCompanyNip($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->company_nip !== $v) {
			$this->company_nip = $v;
			$this->modifiedColumns[] = OrderShippingSenderPeer::COMPANY_NIP;
		}

		return $this;
	} // setCompanyNip()

	/**
	 * Set the value of [company_post_code] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShippingSender The current object (for fluent API support)
	 */
	public function setCompanyPostCode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->company_post_code !== $v) {
			$this->company_post_code = $v;
			$this->modifiedColumns[] = OrderShippingSenderPeer::COMPANY_POST_CODE;
		}

		return $this;
	} // setCompanyPostCode()

	/**
	 * Set the value of [company_city] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShippingSender The current object (for fluent API support)
	 */
	public function setCompanyCity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->company_city !== $v) {
			$this->company_city = $v;
			$this->modifiedColumns[] = OrderShippingSenderPeer::COMPANY_CITY;
		}

		return $this;
	} // setCompanyCity()

	/**
	 * Set the value of [company_street] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShippingSender The current object (for fluent API support)
	 */
	public function setCompanyStreet($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->company_street !== $v) {
			$this->company_street = $v;
			$this->modifiedColumns[] = OrderShippingSenderPeer::COMPANY_STREET;
		}

		return $this;
	} // setCompanyStreet()

	/**
	 * Set the value of [company_home_nr] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShippingSender The current object (for fluent API support)
	 */
	public function setCompanyHomeNr($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->company_home_nr !== $v) {
			$this->company_home_nr = $v;
			$this->modifiedColumns[] = OrderShippingSenderPeer::COMPANY_HOME_NR;
		}

		return $this;
	} // setCompanyHomeNr()

	/**
	 * Set the value of [company_local_nr] column.
	 * 
	 * @param      string $v new value
	 * @return     OrderShippingSender The current object (for fluent API support)
	 */
	public function setCompanyLocalNr($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->company_local_nr !== $v) {
			$this->company_local_nr = $v;
			$this->modifiedColumns[] = OrderShippingSenderPeer::COMPANY_LOCAL_NR;
		}

		return $this;
	} // setCompanyLocalNr()

	/**
	 * Set the value of [order_id] column.
	 * 
	 * @param      int $v new value
	 * @return     OrderShippingSender The current object (for fluent API support)
	 */
	public function setOrderId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->order_id !== $v) {
			$this->order_id = $v;
			$this->modifiedColumns[] = OrderShippingSenderPeer::ORDER_ID;
		}

		if ($this->aOrderShipping !== null && $this->aOrderShipping->getId() !== $v) {
			$this->aOrderShipping = null;
		}

		return $this;
	} // setOrderId()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->country !== 'pl') {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->created_at = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->updated_at = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->is_company = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->sender_name = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->contact_name = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->name = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->surname = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->postcode = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->city = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->country = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->street = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->street_nr = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->local_nr = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->tel = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->email = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->address = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->bank_name = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->bank_account = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->company_name = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->company_nip = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->company_post_code = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->company_city = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->company_street = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->company_home_nr = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->company_local_nr = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->order_id = ($row[$startcol + 26] !== null) ? (int) $row[$startcol + 26] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 27; // 27 = OrderShippingSenderPeer::NUM_COLUMNS - OrderShippingSenderPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating OrderShippingSender object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aOrderShipping !== null && $this->order_id !== $this->aOrderShipping->getId()) {
			$this->aOrderShipping = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(OrderShippingSenderPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = OrderShippingSenderPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aOrderShipping = null;
		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(OrderShippingSenderPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseOrderShippingSender:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				OrderShippingSenderPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseOrderShippingSender:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(OrderShippingSenderPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseOrderShippingSender:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			if ($this->isModified() && !$this->isColumnModified(OrderShippingSenderPeer::UPDATED_AT))
			{
			  $this->setUpdatedAt(time());
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(OrderShippingSenderPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseOrderShippingSender:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				OrderShippingSenderPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aOrderShipping !== null) {
				if ($this->aOrderShipping->isModified() || $this->aOrderShipping->isNew()) {
					$affectedRows += $this->aOrderShipping->save($con);
				}
				$this->setOrderShipping($this->aOrderShipping);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = OrderShippingSenderPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = OrderShippingSenderPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += OrderShippingSenderPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aOrderShipping !== null) {
				if (!$this->aOrderShipping->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aOrderShipping->getValidationFailures());
				}
			}


			if (($retval = OrderShippingSenderPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = OrderShippingSenderPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getCreatedAt();
				break;
			case 2:
				return $this->getUpdatedAt();
				break;
			case 3:
				return $this->getIsCompany();
				break;
			case 4:
				return $this->getSenderName();
				break;
			case 5:
				return $this->getContactName();
				break;
			case 6:
				return $this->getName();
				break;
			case 7:
				return $this->getSurname();
				break;
			case 8:
				return $this->getPostcode();
				break;
			case 9:
				return $this->getCity();
				break;
			case 10:
				return $this->getCountry();
				break;
			case 11:
				return $this->getStreet();
				break;
			case 12:
				return $this->getStreetNr();
				break;
			case 13:
				return $this->getLocalNr();
				break;
			case 14:
				return $this->getTel();
				break;
			case 15:
				return $this->getEmail();
				break;
			case 16:
				return $this->getAddress();
				break;
			case 17:
				return $this->getBankName();
				break;
			case 18:
				return $this->getBankAccount();
				break;
			case 19:
				return $this->getCompanyName();
				break;
			case 20:
				return $this->getCompanyNip();
				break;
			case 21:
				return $this->getCompanyPostCode();
				break;
			case 22:
				return $this->getCompanyCity();
				break;
			case 23:
				return $this->getCompanyStreet();
				break;
			case 24:
				return $this->getCompanyHomeNr();
				break;
			case 25:
				return $this->getCompanyLocalNr();
				break;
			case 26:
				return $this->getOrderId();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = OrderShippingSenderPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getCreatedAt(),
			$keys[2] => $this->getUpdatedAt(),
			$keys[3] => $this->getIsCompany(),
			$keys[4] => $this->getSenderName(),
			$keys[5] => $this->getContactName(),
			$keys[6] => $this->getName(),
			$keys[7] => $this->getSurname(),
			$keys[8] => $this->getPostcode(),
			$keys[9] => $this->getCity(),
			$keys[10] => $this->getCountry(),
			$keys[11] => $this->getStreet(),
			$keys[12] => $this->getStreetNr(),
			$keys[13] => $this->getLocalNr(),
			$keys[14] => $this->getTel(),
			$keys[15] => $this->getEmail(),
			$keys[16] => $this->getAddress(),
			$keys[17] => $this->getBankName(),
			$keys[18] => $this->getBankAccount(),
			$keys[19] => $this->getCompanyName(),
			$keys[20] => $this->getCompanyNip(),
			$keys[21] => $this->getCompanyPostCode(),
			$keys[22] => $this->getCompanyCity(),
			$keys[23] => $this->getCompanyStreet(),
			$keys[24] => $this->getCompanyHomeNr(),
			$keys[25] => $this->getCompanyLocalNr(),
			$keys[26] => $this->getOrderId(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = OrderShippingSenderPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setCreatedAt($value);
				break;
			case 2:
				$this->setUpdatedAt($value);
				break;
			case 3:
				$this->setIsCompany($value);
				break;
			case 4:
				$this->setSenderName($value);
				break;
			case 5:
				$this->setContactName($value);
				break;
			case 6:
				$this->setName($value);
				break;
			case 7:
				$this->setSurname($value);
				break;
			case 8:
				$this->setPostcode($value);
				break;
			case 9:
				$this->setCity($value);
				break;
			case 10:
				$this->setCountry($value);
				break;
			case 11:
				$this->setStreet($value);
				break;
			case 12:
				$this->setStreetNr($value);
				break;
			case 13:
				$this->setLocalNr($value);
				break;
			case 14:
				$this->setTel($value);
				break;
			case 15:
				$this->setEmail($value);
				break;
			case 16:
				$this->setAddress($value);
				break;
			case 17:
				$this->setBankName($value);
				break;
			case 18:
				$this->setBankAccount($value);
				break;
			case 19:
				$this->setCompanyName($value);
				break;
			case 20:
				$this->setCompanyNip($value);
				break;
			case 21:
				$this->setCompanyPostCode($value);
				break;
			case 22:
				$this->setCompanyCity($value);
				break;
			case 23:
				$this->setCompanyStreet($value);
				break;
			case 24:
				$this->setCompanyHomeNr($value);
				break;
			case 25:
				$this->setCompanyLocalNr($value);
				break;
			case 26:
				$this->setOrderId($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = OrderShippingSenderPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setCreatedAt($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setUpdatedAt($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setIsCompany($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setSenderName($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setContactName($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setName($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setSurname($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setPostcode($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setCity($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setCountry($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setStreet($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setStreetNr($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setLocalNr($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setTel($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setEmail($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setAddress($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setBankName($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setBankAccount($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setCompanyName($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setCompanyNip($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setCompanyPostCode($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setCompanyCity($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setCompanyStreet($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setCompanyHomeNr($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setCompanyLocalNr($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setOrderId($arr[$keys[26]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(OrderShippingSenderPeer::DATABASE_NAME);

		if ($this->isColumnModified(OrderShippingSenderPeer::ID)) $criteria->add(OrderShippingSenderPeer::ID, $this->id);
		if ($this->isColumnModified(OrderShippingSenderPeer::CREATED_AT)) $criteria->add(OrderShippingSenderPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(OrderShippingSenderPeer::UPDATED_AT)) $criteria->add(OrderShippingSenderPeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(OrderShippingSenderPeer::IS_COMPANY)) $criteria->add(OrderShippingSenderPeer::IS_COMPANY, $this->is_company);
		if ($this->isColumnModified(OrderShippingSenderPeer::SENDER_NAME)) $criteria->add(OrderShippingSenderPeer::SENDER_NAME, $this->sender_name);
		if ($this->isColumnModified(OrderShippingSenderPeer::CONTACT_NAME)) $criteria->add(OrderShippingSenderPeer::CONTACT_NAME, $this->contact_name);
		if ($this->isColumnModified(OrderShippingSenderPeer::NAME)) $criteria->add(OrderShippingSenderPeer::NAME, $this->name);
		if ($this->isColumnModified(OrderShippingSenderPeer::SURNAME)) $criteria->add(OrderShippingSenderPeer::SURNAME, $this->surname);
		if ($this->isColumnModified(OrderShippingSenderPeer::POSTCODE)) $criteria->add(OrderShippingSenderPeer::POSTCODE, $this->postcode);
		if ($this->isColumnModified(OrderShippingSenderPeer::CITY)) $criteria->add(OrderShippingSenderPeer::CITY, $this->city);
		if ($this->isColumnModified(OrderShippingSenderPeer::COUNTRY)) $criteria->add(OrderShippingSenderPeer::COUNTRY, $this->country);
		if ($this->isColumnModified(OrderShippingSenderPeer::STREET)) $criteria->add(OrderShippingSenderPeer::STREET, $this->street);
		if ($this->isColumnModified(OrderShippingSenderPeer::STREET_NR)) $criteria->add(OrderShippingSenderPeer::STREET_NR, $this->street_nr);
		if ($this->isColumnModified(OrderShippingSenderPeer::LOCAL_NR)) $criteria->add(OrderShippingSenderPeer::LOCAL_NR, $this->local_nr);
		if ($this->isColumnModified(OrderShippingSenderPeer::TEL)) $criteria->add(OrderShippingSenderPeer::TEL, $this->tel);
		if ($this->isColumnModified(OrderShippingSenderPeer::EMAIL)) $criteria->add(OrderShippingSenderPeer::EMAIL, $this->email);
		if ($this->isColumnModified(OrderShippingSenderPeer::ADDRESS)) $criteria->add(OrderShippingSenderPeer::ADDRESS, $this->address);
		if ($this->isColumnModified(OrderShippingSenderPeer::BANK_NAME)) $criteria->add(OrderShippingSenderPeer::BANK_NAME, $this->bank_name);
		if ($this->isColumnModified(OrderShippingSenderPeer::BANK_ACCOUNT)) $criteria->add(OrderShippingSenderPeer::BANK_ACCOUNT, $this->bank_account);
		if ($this->isColumnModified(OrderShippingSenderPeer::COMPANY_NAME)) $criteria->add(OrderShippingSenderPeer::COMPANY_NAME, $this->company_name);
		if ($this->isColumnModified(OrderShippingSenderPeer::COMPANY_NIP)) $criteria->add(OrderShippingSenderPeer::COMPANY_NIP, $this->company_nip);
		if ($this->isColumnModified(OrderShippingSenderPeer::COMPANY_POST_CODE)) $criteria->add(OrderShippingSenderPeer::COMPANY_POST_CODE, $this->company_post_code);
		if ($this->isColumnModified(OrderShippingSenderPeer::COMPANY_CITY)) $criteria->add(OrderShippingSenderPeer::COMPANY_CITY, $this->company_city);
		if ($this->isColumnModified(OrderShippingSenderPeer::COMPANY_STREET)) $criteria->add(OrderShippingSenderPeer::COMPANY_STREET, $this->company_street);
		if ($this->isColumnModified(OrderShippingSenderPeer::COMPANY_HOME_NR)) $criteria->add(OrderShippingSenderPeer::COMPANY_HOME_NR, $this->company_home_nr);
		if ($this->isColumnModified(OrderShippingSenderPeer::COMPANY_LOCAL_NR)) $criteria->add(OrderShippingSenderPeer::COMPANY_LOCAL_NR, $this->company_local_nr);
		if ($this->isColumnModified(OrderShippingSenderPeer::ORDER_ID)) $criteria->add(OrderShippingSenderPeer::ORDER_ID, $this->order_id);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(OrderShippingSenderPeer::DATABASE_NAME);

		$criteria->add(OrderShippingSenderPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of OrderShippingSender (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);

		$copyObj->setIsCompany($this->is_company);

		$copyObj->setSenderName($this->sender_name);

		$copyObj->setContactName($this->contact_name);

		$copyObj->setName($this->name);

		$copyObj->setSurname($this->surname);

		$copyObj->setPostcode($this->postcode);

		$copyObj->setCity($this->city);

		$copyObj->setCountry($this->country);

		$copyObj->setStreet($this->street);

		$copyObj->setStreetNr($this->street_nr);

		$copyObj->setLocalNr($this->local_nr);

		$copyObj->setTel($this->tel);

		$copyObj->setEmail($this->email);

		$copyObj->setAddress($this->address);

		$copyObj->setBankName($this->bank_name);

		$copyObj->setBankAccount($this->bank_account);

		$copyObj->setCompanyName($this->company_name);

		$copyObj->setCompanyNip($this->company_nip);

		$copyObj->setCompanyPostCode($this->company_post_code);

		$copyObj->setCompanyCity($this->company_city);

		$copyObj->setCompanyStreet($this->company_street);

		$copyObj->setCompanyHomeNr($this->company_home_nr);

		$copyObj->setCompanyLocalNr($this->company_local_nr);

		$copyObj->setOrderId($this->order_id);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     OrderShippingSender Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     OrderShippingSenderPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new OrderShippingSenderPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a OrderShipping object.
	 *
	 * @param      OrderShipping $v
	 * @return     OrderShippingSender The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setOrderShipping(OrderShipping $v = null)
	{
		if ($v === null) {
			$this->setOrderId(NULL);
		} else {
			$this->setOrderId($v->getId());
		}

		$this->aOrderShipping = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the OrderShipping object, it will not be re-added.
		if ($v !== null) {
			$v->addOrderShippingSender($this);
		}

		return $this;
	}


	/**
	 * Get the associated OrderShipping object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     OrderShipping The associated OrderShipping object.
	 * @throws     PropelException
	 */
	public function getOrderShipping(PropelPDO $con = null)
	{
		if ($this->aOrderShipping === null && ($this->order_id !== null)) {
			$this->aOrderShipping = OrderShippingPeer::retrieveByPk($this->order_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aOrderShipping->addOrderShippingSenders($this);
			 */
		}
		return $this->aOrderShipping;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

			$this->aOrderShipping = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseOrderShippingSender:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseOrderShippingSender::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseOrderShippingSender
