<?php

/**
 * Base class that represents a row from the 'zones_services' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * 07/15/11 12:03:10
 *
 * @package    lib.model.om
 */
abstract class BaseZonesServices extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ZonesServicesPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the zone_id field.
	 * @var        int
	 */
	protected $zone_id;

	/**
	 * The value for the code field.
	 * @var        string
	 */
	protected $code;

	/**
	 * The value for the short_name field.
	 * @var        string
	 */
	protected $short_name;

	/**
	 * The value for the name field.
	 * @var        string
	 */
	protected $name;

	/**
	 * The value for the service_id field.
	 * @var        string
	 */
	protected $service_id;

	/**
	 * The value for the is_public_access field.
	 * Note: this column has a database default value of: true
	 * @var        boolean
	 */
	protected $is_public_access;

	/**
	 * The value for the is_available field.
	 * Note: this column has a database default value of: true
	 * @var        boolean
	 */
	protected $is_available;

	/**
	 * The value for the show_in_calculate field.
	 * Note: this column has a database default value of: true
	 * @var        boolean
	 */
	protected $show_in_calculate;

	/**
	 * The value for the show_in_tariff field.
	 * Note: this column has a database default value of: true
	 * @var        boolean
	 */
	protected $show_in_tariff;

	/**
	 * The value for the cash_on_delivery field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $cash_on_delivery;

	/**
	 * The value for the commission field.
	 * @var        string
	 */
	protected $commission;

	/**
	 * The value for the price field.
	 * @var        string
	 */
	protected $price;

	/**
	 * The value for the insurance field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $insurance;

	/**
	 * The value for the free_insurance_limit field.
	 * @var        string
	 */
	protected $free_insurance_limit;

	/**
	 * The value for the additional_amount field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $additional_amount;

	/**
	 * The value for the notice field.
	 * @var        string
	 */
	protected $notice;

	/**
	 * The value for the type field.
	 * @var        string
	 */
	protected $type;

	/**
	 * @var        Zones
	 */
	protected $aZones;

	/**
	 * @var        array OrderShippingZonesServices[] Collection to store aggregation of OrderShippingZonesServices objects.
	 */
	protected $collOrderShippingZonesServicess;

	/**
	 * @var        Criteria The criteria used to select the current contents of collOrderShippingZonesServicess.
	 */
	private $lastOrderShippingZonesServicesCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'ZonesServicesPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->is_public_access = true;
		$this->is_available = true;
		$this->show_in_calculate = true;
		$this->show_in_tariff = true;
		$this->cash_on_delivery = false;
		$this->insurance = false;
		$this->additional_amount = false;
	}

	/**
	 * Initializes internal state of BaseZonesServices object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [zone_id] column value.
	 * 
	 * @return     int
	 */
	public function getZoneId()
	{
		return $this->zone_id;
	}

	/**
	 * Get the [code] column value.
	 * 
	 * @return     string
	 */
	public function getCode()
	{
		return $this->code;
	}

	/**
	 * Get the [short_name] column value.
	 * 
	 * @return     string
	 */
	public function getShortName()
	{
		return $this->short_name;
	}

	/**
	 * Get the [name] column value.
	 * 
	 * @return     string
	 */
	public function getName()
	{
		return $this->name;
	}

	/**
	 * Get the [service_id] column value.
	 * 
	 * @return     string
	 */
	public function getServiceId()
	{
		return $this->service_id;
	}

	/**
	 * Get the [is_public_access] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsPublicAccess()
	{
		return $this->is_public_access;
	}

	/**
	 * Get the [is_available] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsAvailable()
	{
		return $this->is_available;
	}

	/**
	 * Get the [show_in_calculate] column value.
	 * 
	 * @return     boolean
	 */
	public function getShowInCalculate()
	{
		return $this->show_in_calculate;
	}

	/**
	 * Get the [show_in_tariff] column value.
	 * 
	 * @return     boolean
	 */
	public function getShowInTariff()
	{
		return $this->show_in_tariff;
	}

	/**
	 * Get the [cash_on_delivery] column value.
	 * 
	 * @return     boolean
	 */
	public function getCashOnDelivery()
	{
		return $this->cash_on_delivery;
	}

	/**
	 * Get the [commission] column value.
	 * 
	 * @return     string
	 */
	public function getCommission()
	{
		return $this->commission;
	}

	/**
	 * Get the [price] column value.
	 * 
	 * @return     string
	 */
	public function getPrice()
	{
		return $this->price;
	}

	/**
	 * Get the [insurance] column value.
	 * 
	 * @return     boolean
	 */
	public function getInsurance()
	{
		return $this->insurance;
	}

	/**
	 * Get the [free_insurance_limit] column value.
	 * 
	 * @return     string
	 */
	public function getFreeInsuranceLimit()
	{
		return $this->free_insurance_limit;
	}

	/**
	 * Get the [additional_amount] column value.
	 * 
	 * @return     boolean
	 */
	public function getAdditionalAmount()
	{
		return $this->additional_amount;
	}

	/**
	 * Get the [notice] column value.
	 * 
	 * @return     string
	 */
	public function getNotice()
	{
		return $this->notice;
	}

	/**
	 * Get the [type] column value.
	 * 
	 * @return     string
	 */
	public function getType()
	{
		return $this->type;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     ZonesServices The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = ZonesServicesPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [zone_id] column.
	 * 
	 * @param      int $v new value
	 * @return     ZonesServices The current object (for fluent API support)
	 */
	public function setZoneId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->zone_id !== $v) {
			$this->zone_id = $v;
			$this->modifiedColumns[] = ZonesServicesPeer::ZONE_ID;
		}

		if ($this->aZones !== null && $this->aZones->getId() !== $v) {
			$this->aZones = null;
		}

		return $this;
	} // setZoneId()

	/**
	 * Set the value of [code] column.
	 * 
	 * @param      string $v new value
	 * @return     ZonesServices The current object (for fluent API support)
	 */
	public function setCode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->code !== $v) {
			$this->code = $v;
			$this->modifiedColumns[] = ZonesServicesPeer::CODE;
		}

		return $this;
	} // setCode()

	/**
	 * Set the value of [short_name] column.
	 * 
	 * @param      string $v new value
	 * @return     ZonesServices The current object (for fluent API support)
	 */
	public function setShortName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->short_name !== $v) {
			$this->short_name = $v;
			$this->modifiedColumns[] = ZonesServicesPeer::SHORT_NAME;
		}

		return $this;
	} // setShortName()

	/**
	 * Set the value of [name] column.
	 * 
	 * @param      string $v new value
	 * @return     ZonesServices The current object (for fluent API support)
	 */
	public function setName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->name !== $v) {
			$this->name = $v;
			$this->modifiedColumns[] = ZonesServicesPeer::NAME;
		}

		return $this;
	} // setName()

	/**
	 * Set the value of [service_id] column.
	 * 
	 * @param      string $v new value
	 * @return     ZonesServices The current object (for fluent API support)
	 */
	public function setServiceId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->service_id !== $v) {
			$this->service_id = $v;
			$this->modifiedColumns[] = ZonesServicesPeer::SERVICE_ID;
		}

		return $this;
	} // setServiceId()

	/**
	 * Set the value of [is_public_access] column.
	 * 
	 * @param      boolean $v new value
	 * @return     ZonesServices The current object (for fluent API support)
	 */
	public function setIsPublicAccess($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_public_access !== $v || $this->isNew()) {
			$this->is_public_access = $v;
			$this->modifiedColumns[] = ZonesServicesPeer::IS_PUBLIC_ACCESS;
		}

		return $this;
	} // setIsPublicAccess()

	/**
	 * Set the value of [is_available] column.
	 * 
	 * @param      boolean $v new value
	 * @return     ZonesServices The current object (for fluent API support)
	 */
	public function setIsAvailable($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_available !== $v || $this->isNew()) {
			$this->is_available = $v;
			$this->modifiedColumns[] = ZonesServicesPeer::IS_AVAILABLE;
		}

		return $this;
	} // setIsAvailable()

	/**
	 * Set the value of [show_in_calculate] column.
	 * 
	 * @param      boolean $v new value
	 * @return     ZonesServices The current object (for fluent API support)
	 */
	public function setShowInCalculate($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->show_in_calculate !== $v || $this->isNew()) {
			$this->show_in_calculate = $v;
			$this->modifiedColumns[] = ZonesServicesPeer::SHOW_IN_CALCULATE;
		}

		return $this;
	} // setShowInCalculate()

	/**
	 * Set the value of [show_in_tariff] column.
	 * 
	 * @param      boolean $v new value
	 * @return     ZonesServices The current object (for fluent API support)
	 */
	public function setShowInTariff($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->show_in_tariff !== $v || $this->isNew()) {
			$this->show_in_tariff = $v;
			$this->modifiedColumns[] = ZonesServicesPeer::SHOW_IN_TARIFF;
		}

		return $this;
	} // setShowInTariff()

	/**
	 * Set the value of [cash_on_delivery] column.
	 * 
	 * @param      boolean $v new value
	 * @return     ZonesServices The current object (for fluent API support)
	 */
	public function setCashOnDelivery($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->cash_on_delivery !== $v || $this->isNew()) {
			$this->cash_on_delivery = $v;
			$this->modifiedColumns[] = ZonesServicesPeer::CASH_ON_DELIVERY;
		}

		return $this;
	} // setCashOnDelivery()

	/**
	 * Set the value of [commission] column.
	 * 
	 * @param      string $v new value
	 * @return     ZonesServices The current object (for fluent API support)
	 */
	public function setCommission($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->commission !== $v) {
			$this->commission = $v;
			$this->modifiedColumns[] = ZonesServicesPeer::COMMISSION;
		}

		return $this;
	} // setCommission()

	/**
	 * Set the value of [price] column.
	 * 
	 * @param      string $v new value
	 * @return     ZonesServices The current object (for fluent API support)
	 */
	public function setPrice($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->price !== $v) {
			$this->price = $v;
			$this->modifiedColumns[] = ZonesServicesPeer::PRICE;
		}

		return $this;
	} // setPrice()

	/**
	 * Set the value of [insurance] column.
	 * 
	 * @param      boolean $v new value
	 * @return     ZonesServices The current object (for fluent API support)
	 */
	public function setInsurance($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->insurance !== $v || $this->isNew()) {
			$this->insurance = $v;
			$this->modifiedColumns[] = ZonesServicesPeer::INSURANCE;
		}

		return $this;
	} // setInsurance()

	/**
	 * Set the value of [free_insurance_limit] column.
	 * 
	 * @param      string $v new value
	 * @return     ZonesServices The current object (for fluent API support)
	 */
	public function setFreeInsuranceLimit($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->free_insurance_limit !== $v) {
			$this->free_insurance_limit = $v;
			$this->modifiedColumns[] = ZonesServicesPeer::FREE_INSURANCE_LIMIT;
		}

		return $this;
	} // setFreeInsuranceLimit()

	/**
	 * Set the value of [additional_amount] column.
	 * 
	 * @param      boolean $v new value
	 * @return     ZonesServices The current object (for fluent API support)
	 */
	public function setAdditionalAmount($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->additional_amount !== $v || $this->isNew()) {
			$this->additional_amount = $v;
			$this->modifiedColumns[] = ZonesServicesPeer::ADDITIONAL_AMOUNT;
		}

		return $this;
	} // setAdditionalAmount()

	/**
	 * Set the value of [notice] column.
	 * 
	 * @param      string $v new value
	 * @return     ZonesServices The current object (for fluent API support)
	 */
	public function setNotice($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->notice !== $v) {
			$this->notice = $v;
			$this->modifiedColumns[] = ZonesServicesPeer::NOTICE;
		}

		return $this;
	} // setNotice()

	/**
	 * Set the value of [type] column.
	 * 
	 * @param      string $v new value
	 * @return     ZonesServices The current object (for fluent API support)
	 */
	public function setType($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->type !== $v) {
			$this->type = $v;
			$this->modifiedColumns[] = ZonesServicesPeer::TYPE;
		}

		return $this;
	} // setType()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->is_public_access !== true) {
				return false;
			}

			if ($this->is_available !== true) {
				return false;
			}

			if ($this->show_in_calculate !== true) {
				return false;
			}

			if ($this->show_in_tariff !== true) {
				return false;
			}

			if ($this->cash_on_delivery !== false) {
				return false;
			}

			if ($this->insurance !== false) {
				return false;
			}

			if ($this->additional_amount !== false) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->zone_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->code = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->short_name = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->name = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->service_id = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->is_public_access = ($row[$startcol + 6] !== null) ? (boolean) $row[$startcol + 6] : null;
			$this->is_available = ($row[$startcol + 7] !== null) ? (boolean) $row[$startcol + 7] : null;
			$this->show_in_calculate = ($row[$startcol + 8] !== null) ? (boolean) $row[$startcol + 8] : null;
			$this->show_in_tariff = ($row[$startcol + 9] !== null) ? (boolean) $row[$startcol + 9] : null;
			$this->cash_on_delivery = ($row[$startcol + 10] !== null) ? (boolean) $row[$startcol + 10] : null;
			$this->commission = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->price = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->insurance = ($row[$startcol + 13] !== null) ? (boolean) $row[$startcol + 13] : null;
			$this->free_insurance_limit = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->additional_amount = ($row[$startcol + 15] !== null) ? (boolean) $row[$startcol + 15] : null;
			$this->notice = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->type = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 18; // 18 = ZonesServicesPeer::NUM_COLUMNS - ZonesServicesPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating ZonesServices object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aZones !== null && $this->zone_id !== $this->aZones->getId()) {
			$this->aZones = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ZonesServicesPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = ZonesServicesPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aZones = null;
			$this->collOrderShippingZonesServicess = null;
			$this->lastOrderShippingZonesServicesCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ZonesServicesPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseZonesServices:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				ZonesServicesPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseZonesServices:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ZonesServicesPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseZonesServices:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseZonesServices:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				ZonesServicesPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aZones !== null) {
				if ($this->aZones->isModified() || $this->aZones->isNew()) {
					$affectedRows += $this->aZones->save($con);
				}
				$this->setZones($this->aZones);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = ZonesServicesPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = ZonesServicesPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += ZonesServicesPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collOrderShippingZonesServicess !== null) {
				foreach ($this->collOrderShippingZonesServicess as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aZones !== null) {
				if (!$this->aZones->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aZones->getValidationFailures());
				}
			}


			if (($retval = ZonesServicesPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collOrderShippingZonesServicess !== null) {
					foreach ($this->collOrderShippingZonesServicess as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ZonesServicesPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getZoneId();
				break;
			case 2:
				return $this->getCode();
				break;
			case 3:
				return $this->getShortName();
				break;
			case 4:
				return $this->getName();
				break;
			case 5:
				return $this->getServiceId();
				break;
			case 6:
				return $this->getIsPublicAccess();
				break;
			case 7:
				return $this->getIsAvailable();
				break;
			case 8:
				return $this->getShowInCalculate();
				break;
			case 9:
				return $this->getShowInTariff();
				break;
			case 10:
				return $this->getCashOnDelivery();
				break;
			case 11:
				return $this->getCommission();
				break;
			case 12:
				return $this->getPrice();
				break;
			case 13:
				return $this->getInsurance();
				break;
			case 14:
				return $this->getFreeInsuranceLimit();
				break;
			case 15:
				return $this->getAdditionalAmount();
				break;
			case 16:
				return $this->getNotice();
				break;
			case 17:
				return $this->getType();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = ZonesServicesPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getZoneId(),
			$keys[2] => $this->getCode(),
			$keys[3] => $this->getShortName(),
			$keys[4] => $this->getName(),
			$keys[5] => $this->getServiceId(),
			$keys[6] => $this->getIsPublicAccess(),
			$keys[7] => $this->getIsAvailable(),
			$keys[8] => $this->getShowInCalculate(),
			$keys[9] => $this->getShowInTariff(),
			$keys[10] => $this->getCashOnDelivery(),
			$keys[11] => $this->getCommission(),
			$keys[12] => $this->getPrice(),
			$keys[13] => $this->getInsurance(),
			$keys[14] => $this->getFreeInsuranceLimit(),
			$keys[15] => $this->getAdditionalAmount(),
			$keys[16] => $this->getNotice(),
			$keys[17] => $this->getType(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ZonesServicesPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setZoneId($value);
				break;
			case 2:
				$this->setCode($value);
				break;
			case 3:
				$this->setShortName($value);
				break;
			case 4:
				$this->setName($value);
				break;
			case 5:
				$this->setServiceId($value);
				break;
			case 6:
				$this->setIsPublicAccess($value);
				break;
			case 7:
				$this->setIsAvailable($value);
				break;
			case 8:
				$this->setShowInCalculate($value);
				break;
			case 9:
				$this->setShowInTariff($value);
				break;
			case 10:
				$this->setCashOnDelivery($value);
				break;
			case 11:
				$this->setCommission($value);
				break;
			case 12:
				$this->setPrice($value);
				break;
			case 13:
				$this->setInsurance($value);
				break;
			case 14:
				$this->setFreeInsuranceLimit($value);
				break;
			case 15:
				$this->setAdditionalAmount($value);
				break;
			case 16:
				$this->setNotice($value);
				break;
			case 17:
				$this->setType($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = ZonesServicesPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setZoneId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setCode($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setShortName($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setName($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setServiceId($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setIsPublicAccess($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setIsAvailable($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setShowInCalculate($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setShowInTariff($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setCashOnDelivery($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setCommission($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setPrice($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setInsurance($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setFreeInsuranceLimit($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setAdditionalAmount($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setNotice($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setType($arr[$keys[17]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ZonesServicesPeer::DATABASE_NAME);

		if ($this->isColumnModified(ZonesServicesPeer::ID)) $criteria->add(ZonesServicesPeer::ID, $this->id);
		if ($this->isColumnModified(ZonesServicesPeer::ZONE_ID)) $criteria->add(ZonesServicesPeer::ZONE_ID, $this->zone_id);
		if ($this->isColumnModified(ZonesServicesPeer::CODE)) $criteria->add(ZonesServicesPeer::CODE, $this->code);
		if ($this->isColumnModified(ZonesServicesPeer::SHORT_NAME)) $criteria->add(ZonesServicesPeer::SHORT_NAME, $this->short_name);
		if ($this->isColumnModified(ZonesServicesPeer::NAME)) $criteria->add(ZonesServicesPeer::NAME, $this->name);
		if ($this->isColumnModified(ZonesServicesPeer::SERVICE_ID)) $criteria->add(ZonesServicesPeer::SERVICE_ID, $this->service_id);
		if ($this->isColumnModified(ZonesServicesPeer::IS_PUBLIC_ACCESS)) $criteria->add(ZonesServicesPeer::IS_PUBLIC_ACCESS, $this->is_public_access);
		if ($this->isColumnModified(ZonesServicesPeer::IS_AVAILABLE)) $criteria->add(ZonesServicesPeer::IS_AVAILABLE, $this->is_available);
		if ($this->isColumnModified(ZonesServicesPeer::SHOW_IN_CALCULATE)) $criteria->add(ZonesServicesPeer::SHOW_IN_CALCULATE, $this->show_in_calculate);
		if ($this->isColumnModified(ZonesServicesPeer::SHOW_IN_TARIFF)) $criteria->add(ZonesServicesPeer::SHOW_IN_TARIFF, $this->show_in_tariff);
		if ($this->isColumnModified(ZonesServicesPeer::CASH_ON_DELIVERY)) $criteria->add(ZonesServicesPeer::CASH_ON_DELIVERY, $this->cash_on_delivery);
		if ($this->isColumnModified(ZonesServicesPeer::COMMISSION)) $criteria->add(ZonesServicesPeer::COMMISSION, $this->commission);
		if ($this->isColumnModified(ZonesServicesPeer::PRICE)) $criteria->add(ZonesServicesPeer::PRICE, $this->price);
		if ($this->isColumnModified(ZonesServicesPeer::INSURANCE)) $criteria->add(ZonesServicesPeer::INSURANCE, $this->insurance);
		if ($this->isColumnModified(ZonesServicesPeer::FREE_INSURANCE_LIMIT)) $criteria->add(ZonesServicesPeer::FREE_INSURANCE_LIMIT, $this->free_insurance_limit);
		if ($this->isColumnModified(ZonesServicesPeer::ADDITIONAL_AMOUNT)) $criteria->add(ZonesServicesPeer::ADDITIONAL_AMOUNT, $this->additional_amount);
		if ($this->isColumnModified(ZonesServicesPeer::NOTICE)) $criteria->add(ZonesServicesPeer::NOTICE, $this->notice);
		if ($this->isColumnModified(ZonesServicesPeer::TYPE)) $criteria->add(ZonesServicesPeer::TYPE, $this->type);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ZonesServicesPeer::DATABASE_NAME);

		$criteria->add(ZonesServicesPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of ZonesServices (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setZoneId($this->zone_id);

		$copyObj->setCode($this->code);

		$copyObj->setShortName($this->short_name);

		$copyObj->setName($this->name);

		$copyObj->setServiceId($this->service_id);

		$copyObj->setIsPublicAccess($this->is_public_access);

		$copyObj->setIsAvailable($this->is_available);

		$copyObj->setShowInCalculate($this->show_in_calculate);

		$copyObj->setShowInTariff($this->show_in_tariff);

		$copyObj->setCashOnDelivery($this->cash_on_delivery);

		$copyObj->setCommission($this->commission);

		$copyObj->setPrice($this->price);

		$copyObj->setInsurance($this->insurance);

		$copyObj->setFreeInsuranceLimit($this->free_insurance_limit);

		$copyObj->setAdditionalAmount($this->additional_amount);

		$copyObj->setNotice($this->notice);

		$copyObj->setType($this->type);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getOrderShippingZonesServicess() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addOrderShippingZonesServices($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     ZonesServices Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ZonesServicesPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ZonesServicesPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Zones object.
	 *
	 * @param      Zones $v
	 * @return     ZonesServices The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setZones(Zones $v = null)
	{
		if ($v === null) {
			$this->setZoneId(NULL);
		} else {
			$this->setZoneId($v->getId());
		}

		$this->aZones = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Zones object, it will not be re-added.
		if ($v !== null) {
			$v->addZonesServices($this);
		}

		return $this;
	}


	/**
	 * Get the associated Zones object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Zones The associated Zones object.
	 * @throws     PropelException
	 */
	public function getZones(PropelPDO $con = null)
	{
		if ($this->aZones === null && ($this->zone_id !== null)) {
			$this->aZones = ZonesPeer::retrieveByPk($this->zone_id);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aZones->addZonesServicess($this);
			 */
		}
		return $this->aZones;
	}

	/**
	 * Clears out the collOrderShippingZonesServicess collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addOrderShippingZonesServicess()
	 */
	public function clearOrderShippingZonesServicess()
	{
		$this->collOrderShippingZonesServicess = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collOrderShippingZonesServicess collection (array).
	 *
	 * By default this just sets the collOrderShippingZonesServicess collection to an empty array (like clearcollOrderShippingZonesServicess());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initOrderShippingZonesServicess()
	{
		$this->collOrderShippingZonesServicess = array();
	}

	/**
	 * Gets an array of OrderShippingZonesServices objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this ZonesServices has previously been saved, it will retrieve
	 * related OrderShippingZonesServicess from storage. If this ZonesServices is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array OrderShippingZonesServices[]
	 * @throws     PropelException
	 */
	public function getOrderShippingZonesServicess($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ZonesServicesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collOrderShippingZonesServicess === null) {
			if ($this->isNew()) {
			   $this->collOrderShippingZonesServicess = array();
			} else {

				$criteria->add(OrderShippingZonesServicesPeer::SERVICE_ID, $this->id);

				OrderShippingZonesServicesPeer::addSelectColumns($criteria);
				$this->collOrderShippingZonesServicess = OrderShippingZonesServicesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(OrderShippingZonesServicesPeer::SERVICE_ID, $this->id);

				OrderShippingZonesServicesPeer::addSelectColumns($criteria);
				if (!isset($this->lastOrderShippingZonesServicesCriteria) || !$this->lastOrderShippingZonesServicesCriteria->equals($criteria)) {
					$this->collOrderShippingZonesServicess = OrderShippingZonesServicesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastOrderShippingZonesServicesCriteria = $criteria;
		return $this->collOrderShippingZonesServicess;
	}

	/**
	 * Returns the number of related OrderShippingZonesServices objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related OrderShippingZonesServices objects.
	 * @throws     PropelException
	 */
	public function countOrderShippingZonesServicess(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ZonesServicesPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collOrderShippingZonesServicess === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(OrderShippingZonesServicesPeer::SERVICE_ID, $this->id);

				$count = OrderShippingZonesServicesPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(OrderShippingZonesServicesPeer::SERVICE_ID, $this->id);

				if (!isset($this->lastOrderShippingZonesServicesCriteria) || !$this->lastOrderShippingZonesServicesCriteria->equals($criteria)) {
					$count = OrderShippingZonesServicesPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collOrderShippingZonesServicess);
				}
			} else {
				$count = count($this->collOrderShippingZonesServicess);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a OrderShippingZonesServices object to this object
	 * through the OrderShippingZonesServices foreign key attribute.
	 *
	 * @param      OrderShippingZonesServices $l OrderShippingZonesServices
	 * @return     void
	 * @throws     PropelException
	 */
	public function addOrderShippingZonesServices(OrderShippingZonesServices $l)
	{
		if ($this->collOrderShippingZonesServicess === null) {
			$this->initOrderShippingZonesServicess();
		}
		if (!in_array($l, $this->collOrderShippingZonesServicess, true)) { // only add it if the **same** object is not already associated
			array_push($this->collOrderShippingZonesServicess, $l);
			$l->setZonesServices($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this ZonesServices is new, it will return
	 * an empty collection; or if this ZonesServices has previously
	 * been saved, it will retrieve related OrderShippingZonesServicess from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in ZonesServices.
	 */
	public function getOrderShippingZonesServicessJoinOrderShipping($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(ZonesServicesPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collOrderShippingZonesServicess === null) {
			if ($this->isNew()) {
				$this->collOrderShippingZonesServicess = array();
			} else {

				$criteria->add(OrderShippingZonesServicesPeer::SERVICE_ID, $this->id);

				$this->collOrderShippingZonesServicess = OrderShippingZonesServicesPeer::doSelectJoinOrderShipping($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(OrderShippingZonesServicesPeer::SERVICE_ID, $this->id);

			if (!isset($this->lastOrderShippingZonesServicesCriteria) || !$this->lastOrderShippingZonesServicesCriteria->equals($criteria)) {
				$this->collOrderShippingZonesServicess = OrderShippingZonesServicesPeer::doSelectJoinOrderShipping($criteria, $con, $join_behavior);
			}
		}
		$this->lastOrderShippingZonesServicesCriteria = $criteria;

		return $this->collOrderShippingZonesServicess;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collOrderShippingZonesServicess) {
				foreach ((array) $this->collOrderShippingZonesServicess as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collOrderShippingZonesServicess = null;
			$this->aZones = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseZonesServices:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseZonesServices::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseZonesServices
